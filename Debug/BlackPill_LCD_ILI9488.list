
BlackPill_LCD_ILI9488.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002700  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  08002898  08002898  00003898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002db4  08002db4  00004010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002db4  08002db4  00003db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002dbc  08002dbc  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dbc  08002dbc  00003dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002dc0  08002dc0  00003dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08002dc4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000010  08002dd4  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08002dd4  000040a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006986  00000000  00000000  00004040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014bc  00000000  00000000  0000a9c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d8  00000000  00000000  0000be88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000051f  00000000  00000000  0000c560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015c48  00000000  00000000  0000ca7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007fd5  00000000  00000000  000226c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000860c3  00000000  00000000  0002a69c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b075f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b1c  00000000  00000000  000b07a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000b22c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002880 	.word	0x08002880

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08002880 	.word	0x08002880

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <ILI9488_SendCommand>:
  //while((SPI1->SR & SPI_SR_TXE) == RESET);
  SPI1->DR = data;
}
//1. Write Command to LCD
void ILI9488_SendCommand(uint8_t com)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60000000) = com;
	uint8_t tmpCmd = com;
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	73fb      	strb	r3, [r7, #15]
	//Set DC HIGH for COMMAND mode
	//HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_RESET);
	DC_COMMAND();
 8000512:	2200      	movs	r2, #0
 8000514:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000518:	480b      	ldr	r0, [pc, #44]	@ (8000548 <ILI9488_SendCommand+0x44>)
 800051a:	f001 fa9d 	bl	8001a58 <HAL_GPIO_WritePin>
	//Put CS LOW
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
	CS_A();
 800051e:	2200      	movs	r2, #0
 8000520:	2102      	movs	r1, #2
 8000522:	4809      	ldr	r0, [pc, #36]	@ (8000548 <ILI9488_SendCommand+0x44>)
 8000524:	f001 fa98 	bl	8001a58 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&hspi1, &tmpCmd, 1, 1);
 8000528:	f107 010f 	add.w	r1, r7, #15
 800052c:	2301      	movs	r3, #1
 800052e:	2201      	movs	r2, #1
 8000530:	4806      	ldr	r0, [pc, #24]	@ (800054c <ILI9488_SendCommand+0x48>)
 8000532:	f001 ff58 	bl	80023e6 <HAL_SPI_Transmit>
	//SendByte(tmpCmd);
	//WaitLastData();
	CS_D();
 8000536:	2201      	movs	r2, #1
 8000538:	2102      	movs	r1, #2
 800053a:	4803      	ldr	r0, [pc, #12]	@ (8000548 <ILI9488_SendCommand+0x44>)
 800053c:	f001 fa8c 	bl	8001a58 <HAL_GPIO_WritePin>
	//Bring CS HIGH
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}
 8000540:	bf00      	nop
 8000542:	3710      	adds	r7, #16
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	40020400 	.word	0x40020400
 800054c:	20000044 	.word	0x20000044

08000550 <ILI9488_SendData>:

//2. Write data to LCD
void ILI9488_SendData(uint8_t data)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60040000) = data;
	uint8_t tmpCmd = data;
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	73fb      	strb	r3, [r7, #15]
	//Set DC LOW for DATA mode
	//HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
	DC_DATA();
 800055e:	2201      	movs	r2, #1
 8000560:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000564:	480b      	ldr	r0, [pc, #44]	@ (8000594 <ILI9488_SendData+0x44>)
 8000566:	f001 fa77 	bl	8001a58 <HAL_GPIO_WritePin>
	//Put CS LOW
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
	CS_A();
 800056a:	2200      	movs	r2, #0
 800056c:	2102      	movs	r1, #2
 800056e:	4809      	ldr	r0, [pc, #36]	@ (8000594 <ILI9488_SendData+0x44>)
 8000570:	f001 fa72 	bl	8001a58 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&hspi1, &tmpCmd, 1, 1);
 8000574:	f107 010f 	add.w	r1, r7, #15
 8000578:	2301      	movs	r3, #1
 800057a:	2201      	movs	r2, #1
 800057c:	4806      	ldr	r0, [pc, #24]	@ (8000598 <ILI9488_SendData+0x48>)
 800057e:	f001 ff32 	bl	80023e6 <HAL_SPI_Transmit>
	//SendByte(tmpCmd);
	//WaitLastData();
	CS_D();
 8000582:	2201      	movs	r2, #1
 8000584:	2102      	movs	r1, #2
 8000586:	4803      	ldr	r0, [pc, #12]	@ (8000594 <ILI9488_SendData+0x44>)
 8000588:	f001 fa66 	bl	8001a58 <HAL_GPIO_WritePin>

	//Bring CS HIGH
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}
 800058c:	bf00      	nop
 800058e:	3710      	adds	r7, #16
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	40020400 	.word	0x40020400
 8000598:	20000044 	.word	0x20000044

0800059c <ILI9488_SendData_Multi>:
//2.2 Write multiple/DMA
void ILI9488_SendData_Multi(uint8_t *buff, size_t buff_size){
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
	DC_DATA();
 80005a6:	2201      	movs	r2, #1
 80005a8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005ac:	4815      	ldr	r0, [pc, #84]	@ (8000604 <ILI9488_SendData_Multi+0x68>)
 80005ae:	f001 fa53 	bl	8001a58 <HAL_GPIO_WritePin>
	    buff++;
	  }

	  WaitLastData();
	  CS_D();*/
	CS_A();
 80005b2:	2200      	movs	r2, #0
 80005b4:	2102      	movs	r1, #2
 80005b6:	4813      	ldr	r0, [pc, #76]	@ (8000604 <ILI9488_SendData_Multi+0x68>)
 80005b8:	f001 fa4e 	bl	8001a58 <HAL_GPIO_WritePin>
	while (buff_size > 0){
 80005bc:	e015      	b.n	80005ea <ILI9488_SendData_Multi+0x4e>
		uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80005c4:	bf28      	it	cs
 80005c6:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 80005ca:	81fb      	strh	r3, [r7, #14]
		HAL_SPI_Transmit(&hspi1, buff, chunk_size, HAL_MAX_DELAY);
 80005cc:	89fa      	ldrh	r2, [r7, #14]
 80005ce:	f04f 33ff 	mov.w	r3, #4294967295
 80005d2:	6879      	ldr	r1, [r7, #4]
 80005d4:	480c      	ldr	r0, [pc, #48]	@ (8000608 <ILI9488_SendData_Multi+0x6c>)
 80005d6:	f001 ff06 	bl	80023e6 <HAL_SPI_Transmit>
		buff += chunk_size;
 80005da:	89fb      	ldrh	r3, [r7, #14]
 80005dc:	687a      	ldr	r2, [r7, #4]
 80005de:	4413      	add	r3, r2
 80005e0:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 80005e2:	89fb      	ldrh	r3, [r7, #14]
 80005e4:	683a      	ldr	r2, [r7, #0]
 80005e6:	1ad3      	subs	r3, r2, r3
 80005e8:	603b      	str	r3, [r7, #0]
	while (buff_size > 0){
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d1e6      	bne.n	80005be <ILI9488_SendData_Multi+0x22>
	}
	CS_D();
 80005f0:	2201      	movs	r2, #1
 80005f2:	2102      	movs	r1, #2
 80005f4:	4803      	ldr	r0, [pc, #12]	@ (8000604 <ILI9488_SendData_Multi+0x68>)
 80005f6:	f001 fa2f 	bl	8001a58 <HAL_GPIO_WritePin>
}
 80005fa:	bf00      	nop
 80005fc:	3710      	adds	r7, #16
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40020400 	.word	0x40020400
 8000608:	20000044 	.word	0x20000044

0800060c <ILI9488_Init>:
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}*/

//void ILI9488_Init(SPI_HandleTypeDef *spiLcdHandle, GPIO_TypeDef *csPORT, uint16_t csPIN, GPIO_TypeDef *dcPORT, uint16_t dcPIN, GPIO_TypeDef *resetPORT, uint16_t resetPIN)
void ILI9488_Init()
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	 RST_A();
	 HAL_Delay(10);
	 RST_D();
	 //HAL_GPIO_WritePin(tftRESET_GPIO, tftRESET_PIN, GPIO_PIN_SET);  //Turn LCD ON*/
	//SPI1->CR1 |= SPI_CR1_SPE;
	CS_D();
 8000610:	2201      	movs	r2, #1
 8000612:	2102      	movs	r1, #2
 8000614:	486c      	ldr	r0, [pc, #432]	@ (80007c8 <ILI9488_Init+0x1bc>)
 8000616:	f001 fa1f 	bl	8001a58 <HAL_GPIO_WritePin>
	RST_A();
 800061a:	2200      	movs	r2, #0
 800061c:	2104      	movs	r1, #4
 800061e:	486a      	ldr	r0, [pc, #424]	@ (80007c8 <ILI9488_Init+0x1bc>)
 8000620:	f001 fa1a 	bl	8001a58 <HAL_GPIO_WritePin>
		 HAL_Delay(10);
 8000624:	200a      	movs	r0, #10
 8000626:	f000 ff89 	bl	800153c <HAL_Delay>
		 RST_D();
 800062a:	2201      	movs	r2, #1
 800062c:	2104      	movs	r1, #4
 800062e:	4866      	ldr	r0, [pc, #408]	@ (80007c8 <ILI9488_Init+0x1bc>)
 8000630:	f001 fa12 	bl	8001a58 <HAL_GPIO_WritePin>
	 width=ILI9488_TFTWIDTH;
 8000634:	4b65      	ldr	r3, [pc, #404]	@ (80007cc <ILI9488_Init+0x1c0>)
 8000636:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800063a:	801a      	strh	r2, [r3, #0]
	 height=ILI9488_TFTHEIGHT;
 800063c:	4b64      	ldr	r3, [pc, #400]	@ (80007d0 <ILI9488_Init+0x1c4>)
 800063e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000642:	801a      	strh	r2, [r3, #0]
	 //CS_A();
	 ILI9488_SendCommand(0xE0);
 8000644:	20e0      	movs	r0, #224	@ 0xe0
 8000646:	f7ff ff5d 	bl	8000504 <ILI9488_SendCommand>
	 ILI9488_SendData(0x00);
 800064a:	2000      	movs	r0, #0
 800064c:	f7ff ff80 	bl	8000550 <ILI9488_SendData>
	 ILI9488_SendData(0x03);
 8000650:	2003      	movs	r0, #3
 8000652:	f7ff ff7d 	bl	8000550 <ILI9488_SendData>
	 ILI9488_SendData(0x09);
 8000656:	2009      	movs	r0, #9
 8000658:	f7ff ff7a 	bl	8000550 <ILI9488_SendData>
	 ILI9488_SendData(0x08);
 800065c:	2008      	movs	r0, #8
 800065e:	f7ff ff77 	bl	8000550 <ILI9488_SendData>
	 ILI9488_SendData(0x16);
 8000662:	2016      	movs	r0, #22
 8000664:	f7ff ff74 	bl	8000550 <ILI9488_SendData>
	 ILI9488_SendData(0x0A);
 8000668:	200a      	movs	r0, #10
 800066a:	f7ff ff71 	bl	8000550 <ILI9488_SendData>
	 ILI9488_SendData(0x3F);
 800066e:	203f      	movs	r0, #63	@ 0x3f
 8000670:	f7ff ff6e 	bl	8000550 <ILI9488_SendData>
	 ILI9488_SendData(0x78);
 8000674:	2078      	movs	r0, #120	@ 0x78
 8000676:	f7ff ff6b 	bl	8000550 <ILI9488_SendData>
	 ILI9488_SendData(0x4C);
 800067a:	204c      	movs	r0, #76	@ 0x4c
 800067c:	f7ff ff68 	bl	8000550 <ILI9488_SendData>
	 ILI9488_SendData(0x09);
 8000680:	2009      	movs	r0, #9
 8000682:	f7ff ff65 	bl	8000550 <ILI9488_SendData>
	 ILI9488_SendData(0x0A);
 8000686:	200a      	movs	r0, #10
 8000688:	f7ff ff62 	bl	8000550 <ILI9488_SendData>
	 ILI9488_SendData(0x08);
 800068c:	2008      	movs	r0, #8
 800068e:	f7ff ff5f 	bl	8000550 <ILI9488_SendData>
	 ILI9488_SendData(0x16);
 8000692:	2016      	movs	r0, #22
 8000694:	f7ff ff5c 	bl	8000550 <ILI9488_SendData>
	 ILI9488_SendData(0x1A);
 8000698:	201a      	movs	r0, #26
 800069a:	f7ff ff59 	bl	8000550 <ILI9488_SendData>
	 ILI9488_SendData(0x0F);
 800069e:	200f      	movs	r0, #15
 80006a0:	f7ff ff56 	bl	8000550 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XE1);
 80006a4:	20e1      	movs	r0, #225	@ 0xe1
 80006a6:	f7ff ff2d 	bl	8000504 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x00);
 80006aa:	2000      	movs	r0, #0
 80006ac:	f7ff ff50 	bl	8000550 <ILI9488_SendData>
	 	ILI9488_SendData(0x16);
 80006b0:	2016      	movs	r0, #22
 80006b2:	f7ff ff4d 	bl	8000550 <ILI9488_SendData>
	 	ILI9488_SendData(0x19);
 80006b6:	2019      	movs	r0, #25
 80006b8:	f7ff ff4a 	bl	8000550 <ILI9488_SendData>
	 	ILI9488_SendData(0x03);
 80006bc:	2003      	movs	r0, #3
 80006be:	f7ff ff47 	bl	8000550 <ILI9488_SendData>
	 	ILI9488_SendData(0x0F);
 80006c2:	200f      	movs	r0, #15
 80006c4:	f7ff ff44 	bl	8000550 <ILI9488_SendData>
	 	ILI9488_SendData(0x05);
 80006c8:	2005      	movs	r0, #5
 80006ca:	f7ff ff41 	bl	8000550 <ILI9488_SendData>
	 	ILI9488_SendData(0x32);
 80006ce:	2032      	movs	r0, #50	@ 0x32
 80006d0:	f7ff ff3e 	bl	8000550 <ILI9488_SendData>
	 	ILI9488_SendData(0x45);
 80006d4:	2045      	movs	r0, #69	@ 0x45
 80006d6:	f7ff ff3b 	bl	8000550 <ILI9488_SendData>
	 	ILI9488_SendData(0x46);
 80006da:	2046      	movs	r0, #70	@ 0x46
 80006dc:	f7ff ff38 	bl	8000550 <ILI9488_SendData>
	 	ILI9488_SendData(0x04);
 80006e0:	2004      	movs	r0, #4
 80006e2:	f7ff ff35 	bl	8000550 <ILI9488_SendData>
	 	ILI9488_SendData(0x0E);
 80006e6:	200e      	movs	r0, #14
 80006e8:	f7ff ff32 	bl	8000550 <ILI9488_SendData>
	 	ILI9488_SendData(0x0D);
 80006ec:	200d      	movs	r0, #13
 80006ee:	f7ff ff2f 	bl	8000550 <ILI9488_SendData>
	 	ILI9488_SendData(0x35);
 80006f2:	2035      	movs	r0, #53	@ 0x35
 80006f4:	f7ff ff2c 	bl	8000550 <ILI9488_SendData>
	 	ILI9488_SendData(0x37);
 80006f8:	2037      	movs	r0, #55	@ 0x37
 80006fa:	f7ff ff29 	bl	8000550 <ILI9488_SendData>
	 	ILI9488_SendData(0x0F);
 80006fe:	200f      	movs	r0, #15
 8000700:	f7ff ff26 	bl	8000550 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XC0);      //Power Control 1
 8000704:	20c0      	movs	r0, #192	@ 0xc0
 8000706:	f7ff fefd 	bl	8000504 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x17);    //Vreg1out
 800070a:	2017      	movs	r0, #23
 800070c:	f7ff ff20 	bl	8000550 <ILI9488_SendData>
	 	ILI9488_SendData(0x15);    //Verg2out
 8000710:	2015      	movs	r0, #21
 8000712:	f7ff ff1d 	bl	8000550 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xC1);      //Power Control 2
 8000716:	20c1      	movs	r0, #193	@ 0xc1
 8000718:	f7ff fef4 	bl	8000504 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x41);    //VGH,VGL
 800071c:	2041      	movs	r0, #65	@ 0x41
 800071e:	f7ff ff17 	bl	8000550 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xC5);      //Power Control 3
 8000722:	20c5      	movs	r0, #197	@ 0xc5
 8000724:	f7ff feee 	bl	8000504 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x00);
 8000728:	2000      	movs	r0, #0
 800072a:	f7ff ff11 	bl	8000550 <ILI9488_SendData>
	 	ILI9488_SendData(0x12);    //Vcom
 800072e:	2012      	movs	r0, #18
 8000730:	f7ff ff0e 	bl	8000550 <ILI9488_SendData>
	 	ILI9488_SendData(0x80);
 8000734:	2080      	movs	r0, #128	@ 0x80
 8000736:	f7ff ff0b 	bl	8000550 <ILI9488_SendData>

	 	ILI9488_SendCommand(0x36);      //Memory Access
 800073a:	2036      	movs	r0, #54	@ 0x36
 800073c:	f7ff fee2 	bl	8000504 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x48);
 8000740:	2048      	movs	r0, #72	@ 0x48
 8000742:	f7ff ff05 	bl	8000550 <ILI9488_SendData>

	 	ILI9488_SendCommand(0x3A);      // Interface Pixel Format
 8000746:	203a      	movs	r0, #58	@ 0x3a
 8000748:	f7ff fedc 	bl	8000504 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x66); 	  //18 bit
 800074c:	2066      	movs	r0, #102	@ 0x66
 800074e:	f7ff feff 	bl	8000550 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XB0);      // Interface Mode Control
 8000752:	20b0      	movs	r0, #176	@ 0xb0
 8000754:	f7ff fed6 	bl	8000504 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x80);     			 //SDO NOT USE
 8000758:	2080      	movs	r0, #128	@ 0x80
 800075a:	f7ff fef9 	bl	8000550 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xB1);      //Frame rate
 800075e:	20b1      	movs	r0, #177	@ 0xb1
 8000760:	f7ff fed0 	bl	8000504 <ILI9488_SendCommand>
	 	ILI9488_SendData(0xA0);    //60Hz
 8000764:	20a0      	movs	r0, #160	@ 0xa0
 8000766:	f7ff fef3 	bl	8000550 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xB4);      //Display Inversion Control
 800076a:	20b4      	movs	r0, #180	@ 0xb4
 800076c:	f7ff feca 	bl	8000504 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x02);    //2-dot
 8000770:	2002      	movs	r0, #2
 8000772:	f7ff feed 	bl	8000550 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XB6); //Display Function Control  RGB/MCU Interface Control
 8000776:	20b6      	movs	r0, #182	@ 0xb6
 8000778:	f7ff fec4 	bl	8000504 <ILI9488_SendCommand>

	 	ILI9488_SendData(0x02);    //MCU
 800077c:	2002      	movs	r0, #2
 800077e:	f7ff fee7 	bl	8000550 <ILI9488_SendData>
	 	ILI9488_SendData(0x02);    //Source,Gate scan dieection
 8000782:	2002      	movs	r0, #2
 8000784:	f7ff fee4 	bl	8000550 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XE9);      // Set Image Functio
 8000788:	20e9      	movs	r0, #233	@ 0xe9
 800078a:	f7ff febb 	bl	8000504 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x00);    // Disable 24 bit data
 800078e:	2000      	movs	r0, #0
 8000790:	f7ff fede 	bl	8000550 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xF7);      // Adjust Control
 8000794:	20f7      	movs	r0, #247	@ 0xf7
 8000796:	f7ff feb5 	bl	8000504 <ILI9488_SendCommand>
	 	ILI9488_SendData(0xA9);
 800079a:	20a9      	movs	r0, #169	@ 0xa9
 800079c:	f7ff fed8 	bl	8000550 <ILI9488_SendData>
	 	ILI9488_SendData(0x51);
 80007a0:	2051      	movs	r0, #81	@ 0x51
 80007a2:	f7ff fed5 	bl	8000550 <ILI9488_SendData>
	 	ILI9488_SendData(0x2C);
 80007a6:	202c      	movs	r0, #44	@ 0x2c
 80007a8:	f7ff fed2 	bl	8000550 <ILI9488_SendData>
	 	ILI9488_SendData(0x82);    // D7 stream, loose
 80007ac:	2082      	movs	r0, #130	@ 0x82
 80007ae:	f7ff fecf 	bl	8000550 <ILI9488_SendData>

	 	ILI9488_SendCommand(ILI9488_SLPOUT);    //Exit Sleep
 80007b2:	2011      	movs	r0, #17
 80007b4:	f7ff fea6 	bl	8000504 <ILI9488_SendCommand>

	 	HAL_Delay(120);
 80007b8:	2078      	movs	r0, #120	@ 0x78
 80007ba:	f000 febf 	bl	800153c <HAL_Delay>

	 	ILI9488_SendCommand(ILI9488_DISPON);    //Display on
 80007be:	2029      	movs	r0, #41	@ 0x29
 80007c0:	f7ff fea0 	bl	8000504 <ILI9488_SendCommand>

}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40020400 	.word	0x40020400
 80007cc:	2000003e 	.word	0x2000003e
 80007d0:	20000040 	.word	0x20000040

080007d4 <setAddrWindow>:

void setAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 80007d4:	b590      	push	{r4, r7, lr}
 80007d6:	b085      	sub	sp, #20
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4604      	mov	r4, r0
 80007dc:	4608      	mov	r0, r1
 80007de:	4611      	mov	r1, r2
 80007e0:	461a      	mov	r2, r3
 80007e2:	4623      	mov	r3, r4
 80007e4:	80fb      	strh	r3, [r7, #6]
 80007e6:	4603      	mov	r3, r0
 80007e8:	80bb      	strh	r3, [r7, #4]
 80007ea:	460b      	mov	r3, r1
 80007ec:	807b      	strh	r3, [r7, #2]
 80007ee:	4613      	mov	r3, r2
 80007f0:	803b      	strh	r3, [r7, #0]
	ILI9488_SendData(y0 >> 8);
	ILI9488_SendData(y0 & 0xff);     // YSTART
	ILI9488_SendData(y1 >> 8);
	ILI9488_SendData(y1 & 0xff);     // YEND
	ILI9488_SendCommand(ILI9488_RAMWR); // write to RAM*/
	ILI9488_SendCommand(ILI9488_CASET); // Column addr set
 80007f2:	202a      	movs	r0, #42	@ 0x2a
 80007f4:	f7ff fe86 	bl	8000504 <ILI9488_SendCommand>
		{
		uint8_t data[] = {(x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF};
 80007f8:	88fb      	ldrh	r3, [r7, #6]
 80007fa:	0a1b      	lsrs	r3, r3, #8
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	733b      	strb	r3, [r7, #12]
 8000802:	88fb      	ldrh	r3, [r7, #6]
 8000804:	b2db      	uxtb	r3, r3
 8000806:	737b      	strb	r3, [r7, #13]
 8000808:	887b      	ldrh	r3, [r7, #2]
 800080a:	0a1b      	lsrs	r3, r3, #8
 800080c:	b29b      	uxth	r3, r3
 800080e:	b2db      	uxtb	r3, r3
 8000810:	73bb      	strb	r3, [r7, #14]
 8000812:	887b      	ldrh	r3, [r7, #2]
 8000814:	b2db      	uxtb	r3, r3
 8000816:	73fb      	strb	r3, [r7, #15]
		ILI9488_SendData_Multi(data, sizeof(data));
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	2104      	movs	r1, #4
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff febc 	bl	800059c <ILI9488_SendData_Multi>
		}
		ILI9488_SendCommand(ILI9488_PASET);
 8000824:	202b      	movs	r0, #43	@ 0x2b
 8000826:	f7ff fe6d 	bl	8000504 <ILI9488_SendCommand>
		{
		uint8_t data[] = {(y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF};
 800082a:	88bb      	ldrh	r3, [r7, #4]
 800082c:	0a1b      	lsrs	r3, r3, #8
 800082e:	b29b      	uxth	r3, r3
 8000830:	b2db      	uxtb	r3, r3
 8000832:	723b      	strb	r3, [r7, #8]
 8000834:	88bb      	ldrh	r3, [r7, #4]
 8000836:	b2db      	uxtb	r3, r3
 8000838:	727b      	strb	r3, [r7, #9]
 800083a:	883b      	ldrh	r3, [r7, #0]
 800083c:	0a1b      	lsrs	r3, r3, #8
 800083e:	b29b      	uxth	r3, r3
 8000840:	b2db      	uxtb	r3, r3
 8000842:	72bb      	strb	r3, [r7, #10]
 8000844:	883b      	ldrh	r3, [r7, #0]
 8000846:	b2db      	uxtb	r3, r3
 8000848:	72fb      	strb	r3, [r7, #11]
		ILI9488_SendData_Multi(data, sizeof(data));
 800084a:	f107 0308 	add.w	r3, r7, #8
 800084e:	2104      	movs	r1, #4
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff fea3 	bl	800059c <ILI9488_SendData_Multi>
		}
		ILI9488_SendCommand(ILI9488_RAMWR); // write to RAM*/
 8000856:	202c      	movs	r0, #44	@ 0x2c
 8000858:	f7ff fe54 	bl	8000504 <ILI9488_SendCommand>
}
 800085c:	bf00      	nop
 800085e:	3714      	adds	r7, #20
 8000860:	46bd      	mov	sp, r7
 8000862:	bd90      	pop	{r4, r7, pc}

08000864 <drawPixel>:
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}


void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	80fb      	strh	r3, [r7, #6]
 800086e:	460b      	mov	r3, r1
 8000870:	80bb      	strh	r3, [r7, #4]
 8000872:	4613      	mov	r3, r2
 8000874:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= width) || (y < 0) || (y >= height))
 8000876:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800087a:	2b00      	cmp	r3, #0
 800087c:	db36      	blt.n	80008ec <drawPixel+0x88>
 800087e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000882:	4a1c      	ldr	r2, [pc, #112]	@ (80008f4 <drawPixel+0x90>)
 8000884:	8812      	ldrh	r2, [r2, #0]
 8000886:	4293      	cmp	r3, r2
 8000888:	da30      	bge.n	80008ec <drawPixel+0x88>
 800088a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800088e:	2b00      	cmp	r3, #0
 8000890:	db2c      	blt.n	80008ec <drawPixel+0x88>
 8000892:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000896:	4a18      	ldr	r2, [pc, #96]	@ (80008f8 <drawPixel+0x94>)
 8000898:	8812      	ldrh	r2, [r2, #0]
 800089a:	4293      	cmp	r3, r2
 800089c:	da26      	bge.n	80008ec <drawPixel+0x88>
		return;

	setAddrWindow(x, y, x + 1, y + 1);
 800089e:	88f8      	ldrh	r0, [r7, #6]
 80008a0:	88b9      	ldrh	r1, [r7, #4]
 80008a2:	88fb      	ldrh	r3, [r7, #6]
 80008a4:	3301      	adds	r3, #1
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	88bb      	ldrh	r3, [r7, #4]
 80008aa:	3301      	adds	r3, #1
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	f7ff ff91 	bl	80007d4 <setAddrWindow>
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 80008b2:	4b12      	ldr	r3, [pc, #72]	@ (80008fc <drawPixel+0x98>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a12      	ldr	r2, [pc, #72]	@ (8000900 <drawPixel+0x9c>)
 80008b8:	8811      	ldrh	r1, [r2, #0]
 80008ba:	2201      	movs	r2, #1
 80008bc:	4618      	mov	r0, r3
 80008be:	f001 f8cb 	bl	8001a58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 80008c2:	4b10      	ldr	r3, [pc, #64]	@ (8000904 <drawPixel+0xa0>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a10      	ldr	r2, [pc, #64]	@ (8000908 <drawPixel+0xa4>)
 80008c8:	8811      	ldrh	r1, [r2, #0]
 80008ca:	2200      	movs	r2, #0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f001 f8c3 	bl	8001a58 <HAL_GPIO_WritePin>

	write16BitColor(color);
 80008d2:	887b      	ldrh	r3, [r7, #2]
 80008d4:	4618      	mov	r0, r3
 80008d6:	f000 fb7b 	bl	8000fd0 <write16BitColor>
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 80008da:	4b0a      	ldr	r3, [pc, #40]	@ (8000904 <drawPixel+0xa0>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a0a      	ldr	r2, [pc, #40]	@ (8000908 <drawPixel+0xa4>)
 80008e0:	8811      	ldrh	r1, [r2, #0]
 80008e2:	2201      	movs	r2, #1
 80008e4:	4618      	mov	r0, r3
 80008e6:	f001 f8b7 	bl	8001a58 <HAL_GPIO_WritePin>
 80008ea:	e000      	b.n	80008ee <drawPixel+0x8a>
		return;
 80008ec:	bf00      	nop

}
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	2000003e 	.word	0x2000003e
 80008f8:	20000040 	.word	0x20000040
 80008fc:	20000038 	.word	0x20000038
 8000900:	2000003c 	.word	0x2000003c
 8000904:	20000030 	.word	0x20000030
 8000908:	20000034 	.word	0x20000034

0800090c <fillScreen>:
  }
}
//6. Fill the entire screen with a background color

void fillScreen(uint16_t color)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af02      	add	r7, sp, #8
 8000912:	4603      	mov	r3, r0
 8000914:	80fb      	strh	r3, [r7, #6]
	fillRect(0, 0,  width, height, color);
 8000916:	4b08      	ldr	r3, [pc, #32]	@ (8000938 <fillScreen+0x2c>)
 8000918:	881b      	ldrh	r3, [r3, #0]
 800091a:	b21a      	sxth	r2, r3
 800091c:	4b07      	ldr	r3, [pc, #28]	@ (800093c <fillScreen+0x30>)
 800091e:	881b      	ldrh	r3, [r3, #0]
 8000920:	b219      	sxth	r1, r3
 8000922:	88fb      	ldrh	r3, [r7, #6]
 8000924:	9300      	str	r3, [sp, #0]
 8000926:	460b      	mov	r3, r1
 8000928:	2100      	movs	r1, #0
 800092a:	2000      	movs	r0, #0
 800092c:	f000 f808 	bl	8000940 <fillRect>
}
 8000930:	bf00      	nop
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	2000003e 	.word	0x2000003e
 800093c:	20000040 	.word	0x20000040

08000940 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000944:	b08a      	sub	sp, #40	@ 0x28
 8000946:	af00      	add	r7, sp, #0
 8000948:	4606      	mov	r6, r0
 800094a:	4608      	mov	r0, r1
 800094c:	4611      	mov	r1, r2
 800094e:	461a      	mov	r2, r3
 8000950:	4633      	mov	r3, r6
 8000952:	80fb      	strh	r3, [r7, #6]
 8000954:	4603      	mov	r3, r0
 8000956:	80bb      	strh	r3, [r7, #4]
 8000958:	460b      	mov	r3, r1
 800095a:	807b      	strh	r3, [r7, #2]
 800095c:	4613      	mov	r3, r2
 800095e:	803b      	strh	r3, [r7, #0]
 8000960:	466b      	mov	r3, sp
 8000962:	469a      	mov	sl, r3

	uint32_t i, n, cnt, buf_size;
	if ((x >= width) || (y >= height))
 8000964:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000968:	4a90      	ldr	r2, [pc, #576]	@ (8000bac <fillRect+0x26c>)
 800096a:	8812      	ldrh	r2, [r2, #0]
 800096c:	4293      	cmp	r3, r2
 800096e:	da05      	bge.n	800097c <fillRect+0x3c>
 8000970:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000974:	4a8e      	ldr	r2, [pc, #568]	@ (8000bb0 <fillRect+0x270>)
 8000976:	8812      	ldrh	r2, [r2, #0]
 8000978:	4293      	cmp	r3, r2
 800097a:	db01      	blt.n	8000980 <fillRect+0x40>
		return;
 800097c:	46d5      	mov	sp, sl
 800097e:	e110      	b.n	8000ba2 <fillRect+0x262>
	if ((x + w - 1) >= width)
 8000980:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000984:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000988:	4413      	add	r3, r2
 800098a:	4a88      	ldr	r2, [pc, #544]	@ (8000bac <fillRect+0x26c>)
 800098c:	8812      	ldrh	r2, [r2, #0]
 800098e:	4293      	cmp	r3, r2
 8000990:	dd05      	ble.n	800099e <fillRect+0x5e>
		w = width - x;
 8000992:	4b86      	ldr	r3, [pc, #536]	@ (8000bac <fillRect+0x26c>)
 8000994:	881a      	ldrh	r2, [r3, #0]
 8000996:	88fb      	ldrh	r3, [r7, #6]
 8000998:	1ad3      	subs	r3, r2, r3
 800099a:	b29b      	uxth	r3, r3
 800099c:	807b      	strh	r3, [r7, #2]
	if ((y + h - 1) >= height)
 800099e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80009a2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80009a6:	4413      	add	r3, r2
 80009a8:	4a81      	ldr	r2, [pc, #516]	@ (8000bb0 <fillRect+0x270>)
 80009aa:	8812      	ldrh	r2, [r2, #0]
 80009ac:	4293      	cmp	r3, r2
 80009ae:	dd05      	ble.n	80009bc <fillRect+0x7c>
		h = height - y;
 80009b0:	4b7f      	ldr	r3, [pc, #508]	@ (8000bb0 <fillRect+0x270>)
 80009b2:	881a      	ldrh	r2, [r3, #0]
 80009b4:	88bb      	ldrh	r3, [r7, #4]
 80009b6:	1ad3      	subs	r3, r2, r3
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	803b      	strh	r3, [r7, #0]
	setAddrWindow(x, y, x + w - 1, y + h - 1);
 80009bc:	88f8      	ldrh	r0, [r7, #6]
 80009be:	88b9      	ldrh	r1, [r7, #4]
 80009c0:	88fa      	ldrh	r2, [r7, #6]
 80009c2:	887b      	ldrh	r3, [r7, #2]
 80009c4:	4413      	add	r3, r2
 80009c6:	b29b      	uxth	r3, r3
 80009c8:	3b01      	subs	r3, #1
 80009ca:	b29e      	uxth	r6, r3
 80009cc:	88ba      	ldrh	r2, [r7, #4]
 80009ce:	883b      	ldrh	r3, [r7, #0]
 80009d0:	4413      	add	r3, r2
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	3b01      	subs	r3, #1
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	4632      	mov	r2, r6
 80009da:	f7ff fefb 	bl	80007d4 <setAddrWindow>
	uint8_t r = (color & 0xF800) >> 11;
 80009de:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80009e2:	0adb      	lsrs	r3, r3, #11
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	76fb      	strb	r3, [r7, #27]
	uint8_t g = (color & 0x07E0) >> 5;
 80009e8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80009ec:	115b      	asrs	r3, r3, #5
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80009f4:	76bb      	strb	r3, [r7, #26]
	uint8_t b = color & 0x001F;
 80009f6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	f003 031f 	and.w	r3, r3, #31
 8000a00:	767b      	strb	r3, [r7, #25]

	r = (r * 255) / 31;
 8000a02:	7efa      	ldrb	r2, [r7, #27]
 8000a04:	4613      	mov	r3, r2
 8000a06:	021b      	lsls	r3, r3, #8
 8000a08:	1a9b      	subs	r3, r3, r2
 8000a0a:	4a6a      	ldr	r2, [pc, #424]	@ (8000bb4 <fillRect+0x274>)
 8000a0c:	fb82 1203 	smull	r1, r2, r2, r3
 8000a10:	441a      	add	r2, r3
 8000a12:	1112      	asrs	r2, r2, #4
 8000a14:	17db      	asrs	r3, r3, #31
 8000a16:	1ad3      	subs	r3, r2, r3
 8000a18:	76fb      	strb	r3, [r7, #27]
	g = (g * 255) / 63;
 8000a1a:	7eba      	ldrb	r2, [r7, #26]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	021b      	lsls	r3, r3, #8
 8000a20:	1a9b      	subs	r3, r3, r2
 8000a22:	4a65      	ldr	r2, [pc, #404]	@ (8000bb8 <fillRect+0x278>)
 8000a24:	fb82 1203 	smull	r1, r2, r2, r3
 8000a28:	441a      	add	r2, r3
 8000a2a:	1152      	asrs	r2, r2, #5
 8000a2c:	17db      	asrs	r3, r3, #31
 8000a2e:	1ad3      	subs	r3, r2, r3
 8000a30:	76bb      	strb	r3, [r7, #26]
	b = (b * 255) / 31;
 8000a32:	7e7a      	ldrb	r2, [r7, #25]
 8000a34:	4613      	mov	r3, r2
 8000a36:	021b      	lsls	r3, r3, #8
 8000a38:	1a9b      	subs	r3, r3, r2
 8000a3a:	4a5e      	ldr	r2, [pc, #376]	@ (8000bb4 <fillRect+0x274>)
 8000a3c:	fb82 1203 	smull	r1, r2, r2, r3
 8000a40:	441a      	add	r2, r3
 8000a42:	1112      	asrs	r2, r2, #4
 8000a44:	17db      	asrs	r3, r3, #31
 8000a46:	1ad3      	subs	r3, r2, r3
 8000a48:	767b      	strb	r3, [r7, #25]

	n = w*h*3;
 8000a4a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a4e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000a52:	fb03 f202 	mul.w	r2, r3, r2
 8000a56:	4613      	mov	r3, r2
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	4413      	add	r3, r2
 8000a5c:	617b      	str	r3, [r7, #20]
	if (n <= 65535){
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000a64:	d204      	bcs.n	8000a70 <fillRect+0x130>
		cnt = 1;
 8000a66:	2301      	movs	r3, #1
 8000a68:	623b      	str	r3, [r7, #32]
		buf_size = n;
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	61fb      	str	r3, [r7, #28]
 8000a6e:	e02f      	b.n	8000ad0 <fillRect+0x190>
	}
	else {
		cnt = n/3;
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	4a52      	ldr	r2, [pc, #328]	@ (8000bbc <fillRect+0x27c>)
 8000a74:	fba2 2303 	umull	r2, r3, r2, r3
 8000a78:	085b      	lsrs	r3, r3, #1
 8000a7a:	623b      	str	r3, [r7, #32]
		buf_size = 3;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	61fb      	str	r3, [r7, #28]
		uint8_t min_cnt = n/65535+1;
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	4a4f      	ldr	r2, [pc, #316]	@ (8000bc0 <fillRect+0x280>)
 8000a84:	fba2 2303 	umull	r2, r3, r2, r3
 8000a88:	0bdb      	lsrs	r3, r3, #15
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	74fb      	strb	r3, [r7, #19]
		for (i=min_cnt; i < n/3; i++){
 8000a90:	7cfb      	ldrb	r3, [r7, #19]
 8000a92:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a94:	e014      	b.n	8000ac0 <fillRect+0x180>
			if(n%i == 0){
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a9a:	fbb3 f2f2 	udiv	r2, r3, r2
 8000a9e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000aa0:	fb01 f202 	mul.w	r2, r1, r2
 8000aa4:	1a9b      	subs	r3, r3, r2
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d107      	bne.n	8000aba <fillRect+0x17a>
				cnt = i;
 8000aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aac:	623b      	str	r3, [r7, #32]
				buf_size = n/i;
 8000aae:	697a      	ldr	r2, [r7, #20]
 8000ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab6:	61fb      	str	r3, [r7, #28]
				break;
 8000ab8:	e00a      	b.n	8000ad0 <fillRect+0x190>
		for (i=min_cnt; i < n/3; i++){
 8000aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000abc:	3301      	adds	r3, #1
 8000abe:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	4a3e      	ldr	r2, [pc, #248]	@ (8000bbc <fillRect+0x27c>)
 8000ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac8:	085b      	lsrs	r3, r3, #1
 8000aca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d3e2      	bcc.n	8000a96 <fillRect+0x156>
			}
		}
	}
	uint8_t frm_buf[buf_size];
 8000ad0:	69f9      	ldr	r1, [r7, #28]
 8000ad2:	460b      	mov	r3, r1
 8000ad4:	3b01      	subs	r3, #1
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	2300      	movs	r3, #0
 8000ada:	4688      	mov	r8, r1
 8000adc:	4699      	mov	r9, r3
 8000ade:	f04f 0200 	mov.w	r2, #0
 8000ae2:	f04f 0300 	mov.w	r3, #0
 8000ae6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000aea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000aee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000af2:	2300      	movs	r3, #0
 8000af4:	460c      	mov	r4, r1
 8000af6:	461d      	mov	r5, r3
 8000af8:	f04f 0200 	mov.w	r2, #0
 8000afc:	f04f 0300 	mov.w	r3, #0
 8000b00:	00eb      	lsls	r3, r5, #3
 8000b02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000b06:	00e2      	lsls	r2, r4, #3
 8000b08:	1dcb      	adds	r3, r1, #7
 8000b0a:	08db      	lsrs	r3, r3, #3
 8000b0c:	00db      	lsls	r3, r3, #3
 8000b0e:	ebad 0d03 	sub.w	sp, sp, r3
 8000b12:	466b      	mov	r3, sp
 8000b14:	3300      	adds	r3, #0
 8000b16:	60bb      	str	r3, [r7, #8]
	for (i=0; i < buf_size/3; i++)
 8000b18:	2300      	movs	r3, #0
 8000b1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b1c:	e019      	b.n	8000b52 <fillRect+0x212>
	{
		frm_buf[i*3] = r;
 8000b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b20:	4613      	mov	r3, r2
 8000b22:	005b      	lsls	r3, r3, #1
 8000b24:	4413      	add	r3, r2
 8000b26:	68ba      	ldr	r2, [r7, #8]
 8000b28:	7ef9      	ldrb	r1, [r7, #27]
 8000b2a:	54d1      	strb	r1, [r2, r3]
		frm_buf[i*3+1] = g;
 8000b2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b2e:	4613      	mov	r3, r2
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	4413      	add	r3, r2
 8000b34:	3301      	adds	r3, #1
 8000b36:	68ba      	ldr	r2, [r7, #8]
 8000b38:	7eb9      	ldrb	r1, [r7, #26]
 8000b3a:	54d1      	strb	r1, [r2, r3]
		frm_buf[i*3+2] = b;
 8000b3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b3e:	4613      	mov	r3, r2
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	4413      	add	r3, r2
 8000b44:	3302      	adds	r3, #2
 8000b46:	68ba      	ldr	r2, [r7, #8]
 8000b48:	7e79      	ldrb	r1, [r7, #25]
 8000b4a:	54d1      	strb	r1, [r2, r3]
	for (i=0; i < buf_size/3; i++)
 8000b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b4e:	3301      	adds	r3, #1
 8000b50:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	4a19      	ldr	r2, [pc, #100]	@ (8000bbc <fillRect+0x27c>)
 8000b56:	fba2 2303 	umull	r2, r3, r2, r3
 8000b5a:	085b      	lsrs	r3, r3, #1
 8000b5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d3dd      	bcc.n	8000b1e <fillRect+0x1de>
	}
	DC_DATA();
 8000b62:	2201      	movs	r2, #1
 8000b64:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b68:	4816      	ldr	r0, [pc, #88]	@ (8000bc4 <fillRect+0x284>)
 8000b6a:	f000 ff75 	bl	8001a58 <HAL_GPIO_WritePin>
	CS_A();
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2102      	movs	r1, #2
 8000b72:	4814      	ldr	r0, [pc, #80]	@ (8000bc4 <fillRect+0x284>)
 8000b74:	f000 ff70 	bl	8001a58 <HAL_GPIO_WritePin>
		while(cnt>0)
 8000b78:	e00a      	b.n	8000b90 <fillRect+0x250>
		{
			HAL_SPI_Transmit(&hspi1, frm_buf, buf_size, HAL_MAX_DELAY);
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	b29a      	uxth	r2, r3
 8000b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b82:	68b9      	ldr	r1, [r7, #8]
 8000b84:	4810      	ldr	r0, [pc, #64]	@ (8000bc8 <fillRect+0x288>)
 8000b86:	f001 fc2e 	bl	80023e6 <HAL_SPI_Transmit>

			cnt -= 1;
 8000b8a:	6a3b      	ldr	r3, [r7, #32]
 8000b8c:	3b01      	subs	r3, #1
 8000b8e:	623b      	str	r3, [r7, #32]
		while(cnt>0)
 8000b90:	6a3b      	ldr	r3, [r7, #32]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d1f1      	bne.n	8000b7a <fillRect+0x23a>
		}
		CS_D();
 8000b96:	2201      	movs	r2, #1
 8000b98:	2102      	movs	r1, #2
 8000b9a:	480a      	ldr	r0, [pc, #40]	@ (8000bc4 <fillRect+0x284>)
 8000b9c:	f000 ff5c 	bl	8001a58 <HAL_GPIO_WritePin>
 8000ba0:	46d5      	mov	sp, sl

}
 8000ba2:	3728      	adds	r7, #40	@ 0x28
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000baa:	bf00      	nop
 8000bac:	2000003e 	.word	0x2000003e
 8000bb0:	20000040 	.word	0x20000040
 8000bb4:	84210843 	.word	0x84210843
 8000bb8:	82082083 	.word	0x82082083
 8000bbc:	aaaaaaab 	.word	0xaaaaaaab
 8000bc0:	80008001 	.word	0x80008001
 8000bc4:	40020400 	.word	0x40020400
 8000bc8:	20000044 	.word	0x20000044

08000bcc <setRotation>:


void setRotation(uint8_t r)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]

	ILI9488_SendCommand(ILI9488_MADCTL);
 8000bd6:	2036      	movs	r0, #54	@ 0x36
 8000bd8:	f7ff fc94 	bl	8000504 <ILI9488_SendCommand>
	uint8_t rotation = r % 4; // can't be higher than 3
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	f003 0303 	and.w	r3, r3, #3
 8000be2:	73fb      	strb	r3, [r7, #15]
	switch (rotation) {
 8000be4:	7bfb      	ldrb	r3, [r7, #15]
 8000be6:	2b03      	cmp	r3, #3
 8000be8:	d83a      	bhi.n	8000c60 <setRotation+0x94>
 8000bea:	a201      	add	r2, pc, #4	@ (adr r2, 8000bf0 <setRotation+0x24>)
 8000bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bf0:	08000c01 	.word	0x08000c01
 8000bf4:	08000c19 	.word	0x08000c19
 8000bf8:	08000c31 	.word	0x08000c31
 8000bfc:	08000c49 	.word	0x08000c49
	case 0:
		ILI9488_SendData(MADCTL_MX | MADCTL_BGR);
 8000c00:	2048      	movs	r0, #72	@ 0x48
 8000c02:	f7ff fca5 	bl	8000550 <ILI9488_SendData>
		width = ILI9488_TFTWIDTH;
 8000c06:	4b18      	ldr	r3, [pc, #96]	@ (8000c68 <setRotation+0x9c>)
 8000c08:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000c0c:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTHEIGHT;
 8000c0e:	4b17      	ldr	r3, [pc, #92]	@ (8000c6c <setRotation+0xa0>)
 8000c10:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000c14:	801a      	strh	r2, [r3, #0]
		break;
 8000c16:	e023      	b.n	8000c60 <setRotation+0x94>
	case 1:
		ILI9488_SendData(MADCTL_MV | MADCTL_BGR);
 8000c18:	2028      	movs	r0, #40	@ 0x28
 8000c1a:	f7ff fc99 	bl	8000550 <ILI9488_SendData>
		width = ILI9488_TFTHEIGHT;
 8000c1e:	4b12      	ldr	r3, [pc, #72]	@ (8000c68 <setRotation+0x9c>)
 8000c20:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000c24:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTWIDTH;
 8000c26:	4b11      	ldr	r3, [pc, #68]	@ (8000c6c <setRotation+0xa0>)
 8000c28:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000c2c:	801a      	strh	r2, [r3, #0]
		break;
 8000c2e:	e017      	b.n	8000c60 <setRotation+0x94>
	case 2:
		ILI9488_SendData(MADCTL_MY | MADCTL_BGR);
 8000c30:	2088      	movs	r0, #136	@ 0x88
 8000c32:	f7ff fc8d 	bl	8000550 <ILI9488_SendData>
		width = ILI9488_TFTWIDTH;
 8000c36:	4b0c      	ldr	r3, [pc, #48]	@ (8000c68 <setRotation+0x9c>)
 8000c38:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000c3c:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTHEIGHT;
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c6c <setRotation+0xa0>)
 8000c40:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000c44:	801a      	strh	r2, [r3, #0]
		break;
 8000c46:	e00b      	b.n	8000c60 <setRotation+0x94>
	case 3:
		ILI9488_SendData(MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8000c48:	20e8      	movs	r0, #232	@ 0xe8
 8000c4a:	f7ff fc81 	bl	8000550 <ILI9488_SendData>
		width = ILI9488_TFTHEIGHT;
 8000c4e:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <setRotation+0x9c>)
 8000c50:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000c54:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTWIDTH;
 8000c56:	4b05      	ldr	r3, [pc, #20]	@ (8000c6c <setRotation+0xa0>)
 8000c58:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000c5c:	801a      	strh	r2, [r3, #0]
		break;
 8000c5e:	bf00      	nop
	}

}
 8000c60:	bf00      	nop
 8000c62:	3710      	adds	r7, #16
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	2000003e 	.word	0x2000003e
 8000c6c:	20000040 	.word	0x20000040

08000c70 <drawChar>:
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3);
}

//11. Text printing functions
void drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 8000c70:	b5b0      	push	{r4, r5, r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af02      	add	r7, sp, #8
 8000c76:	4604      	mov	r4, r0
 8000c78:	4608      	mov	r0, r1
 8000c7a:	4611      	mov	r1, r2
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4623      	mov	r3, r4
 8000c80:	80fb      	strh	r3, [r7, #6]
 8000c82:	4603      	mov	r3, r0
 8000c84:	80bb      	strh	r3, [r7, #4]
 8000c86:	460b      	mov	r3, r1
 8000c88:	70fb      	strb	r3, [r7, #3]
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	803b      	strh	r3, [r7, #0]
	if(rotationNum == 1 || rotationNum ==3)
 8000c8e:	4bac      	ldr	r3, [pc, #688]	@ (8000f40 <drawChar+0x2d0>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d003      	beq.n	8000c9e <drawChar+0x2e>
 8000c96:	4baa      	ldr	r3, [pc, #680]	@ (8000f40 <drawChar+0x2d0>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b03      	cmp	r3, #3
 8000c9c:	d120      	bne.n	8000ce0 <drawChar+0x70>
	{
		if((x >= ILI9488_TFTWIDTH)            || // Clip right
 8000c9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ca2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000ca6:	f280 8144 	bge.w	8000f32 <drawChar+0x2c2>
 8000caa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000cae:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000cb2:	f280 813e 	bge.w	8000f32 <drawChar+0x2c2>
     (y >= ILI9488_TFTHEIGHT)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
 8000cb6:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000cba:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	4413      	add	r3, r2
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	440b      	add	r3, r1
     (y >= ILI9488_TFTHEIGHT)           || // Clip bottom
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	f340 8132 	ble.w	8000f32 <drawChar+0x2c2>
     ((y + 8 * size - 1) < 0))   // Clip top
 8000cce:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000cd2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000cd6:	00db      	lsls	r3, r3, #3
 8000cd8:	4413      	add	r3, r2
     ((x + 6 * size - 1) < 0) || // Clip left
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	dc22      	bgt.n	8000d24 <drawChar+0xb4>
    return;
 8000cde:	e128      	b.n	8000f32 <drawChar+0x2c2>
	}
	else
	{
		if((y >= ILI9488_TFTWIDTH)            || // Clip right
 8000ce0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ce4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000ce8:	f280 8125 	bge.w	8000f36 <drawChar+0x2c6>
 8000cec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cf0:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000cf4:	f280 811f 	bge.w	8000f36 <drawChar+0x2c6>
     (x >= ILI9488_TFTHEIGHT)           || // Clip bottom
     ((y + 6 * size - 1) < 0) || // Clip left
 8000cf8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000cfc:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000d00:	4613      	mov	r3, r2
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	4413      	add	r3, r2
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	440b      	add	r3, r1
     (x >= ILI9488_TFTHEIGHT)           || // Clip bottom
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f340 8113 	ble.w	8000f36 <drawChar+0x2c6>
     ((x + 8 * size - 1) < 0))   // Clip top
 8000d10:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000d14:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000d18:	00db      	lsls	r3, r3, #3
 8000d1a:	4413      	add	r3, r2
     ((y + 6 * size - 1) < 0) || // Clip left
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	f340 810a 	ble.w	8000f36 <drawChar+0x2c6>
 8000d22:	e000      	b.n	8000d26 <drawChar+0xb6>
		if((x >= ILI9488_TFTWIDTH)            || // Clip right
 8000d24:	bf00      	nop
    return;
	}


  if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 8000d26:	4b87      	ldr	r3, [pc, #540]	@ (8000f44 <drawChar+0x2d4>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	f083 0301 	eor.w	r3, r3, #1
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d005      	beq.n	8000d40 <drawChar+0xd0>
 8000d34:	78fb      	ldrb	r3, [r7, #3]
 8000d36:	2baf      	cmp	r3, #175	@ 0xaf
 8000d38:	d902      	bls.n	8000d40 <drawChar+0xd0>
 8000d3a:	78fb      	ldrb	r3, [r7, #3]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	70fb      	strb	r3, [r7, #3]

  for (int8_t i=0; i<6; i++ ) {
 8000d40:	2300      	movs	r3, #0
 8000d42:	73fb      	strb	r3, [r7, #15]
 8000d44:	e0ef      	b.n	8000f26 <drawChar+0x2b6>
    uint8_t line;
    if (i == 5)
 8000d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d4a:	2b05      	cmp	r3, #5
 8000d4c:	d102      	bne.n	8000d54 <drawChar+0xe4>
      line = 0x0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	73bb      	strb	r3, [r7, #14]
 8000d52:	e00b      	b.n	8000d6c <drawChar+0xfc>
    else
      line = pgm_read_byte(font1+(c*5)+i);
 8000d54:	78fa      	ldrb	r2, [r7, #3]
 8000d56:	4613      	mov	r3, r2
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	4413      	add	r3, r2
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d62:	4413      	add	r3, r2
 8000d64:	4a78      	ldr	r2, [pc, #480]	@ (8000f48 <drawChar+0x2d8>)
 8000d66:	4413      	add	r3, r2
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	737b      	strb	r3, [r7, #13]
 8000d70:	e0ce      	b.n	8000f10 <drawChar+0x2a0>
      if (line & 0x1) {
 8000d72:	7bbb      	ldrb	r3, [r7, #14]
 8000d74:	f003 0301 	and.w	r3, r3, #1
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d05e      	beq.n	8000e3a <drawChar+0x1ca>
        if (size == 1) // default size
 8000d7c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d112      	bne.n	8000daa <drawChar+0x13a>
        	drawPixel(x+i, y+j, color);
 8000d84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d88:	b29a      	uxth	r2, r3
 8000d8a:	88fb      	ldrh	r3, [r7, #6]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	b218      	sxth	r0, r3
 8000d92:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000d96:	b29a      	uxth	r2, r3
 8000d98:	88bb      	ldrh	r3, [r7, #4]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	b21b      	sxth	r3, r3
 8000da0:	883a      	ldrh	r2, [r7, #0]
 8000da2:	4619      	mov	r1, r3
 8000da4:	f7ff fd5e 	bl	8000864 <drawPixel>
 8000da8:	e0a9      	b.n	8000efe <drawChar+0x28e>
        else {  // big size
        	fillRect(x+(i*size), y+(j*size), size + x+(i*size), size+1 + y+(j*size), color);
 8000daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dae:	b29a      	uxth	r2, r3
 8000db0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	fb12 f303 	smulbb	r3, r2, r3
 8000dba:	b29a      	uxth	r2, r3
 8000dbc:	88fb      	ldrh	r3, [r7, #6]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	b218      	sxth	r0, r3
 8000dc4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000dc8:	b29a      	uxth	r2, r3
 8000dca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	fb12 f303 	smulbb	r3, r2, r3
 8000dd4:	b29a      	uxth	r2, r3
 8000dd6:	88bb      	ldrh	r3, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	b21c      	sxth	r4, r3
 8000dde:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000de2:	b29a      	uxth	r2, r3
 8000de4:	88fb      	ldrh	r3, [r7, #6]
 8000de6:	4413      	add	r3, r2
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dee:	b299      	uxth	r1, r3
 8000df0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	fb11 f303 	smulbb	r3, r1, r3
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	4413      	add	r3, r2
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	b21d      	sxth	r5, r3
 8000e02:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000e06:	b29a      	uxth	r2, r3
 8000e08:	88bb      	ldrh	r3, [r7, #4]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	b29a      	uxth	r2, r3
 8000e0e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000e12:	b299      	uxth	r1, r3
 8000e14:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	fb11 f303 	smulbb	r3, r1, r3
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	4413      	add	r3, r2
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	3301      	adds	r3, #1
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	b21a      	sxth	r2, r3
 8000e2a:	883b      	ldrh	r3, [r7, #0]
 8000e2c:	9300      	str	r3, [sp, #0]
 8000e2e:	4613      	mov	r3, r2
 8000e30:	462a      	mov	r2, r5
 8000e32:	4621      	mov	r1, r4
 8000e34:	f7ff fd84 	bl	8000940 <fillRect>
 8000e38:	e061      	b.n	8000efe <drawChar+0x28e>
        }
      } else if (bg != color) {
 8000e3a:	8c3a      	ldrh	r2, [r7, #32]
 8000e3c:	883b      	ldrh	r3, [r7, #0]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d05d      	beq.n	8000efe <drawChar+0x28e>
        if (size == 1) // default size
 8000e42:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d112      	bne.n	8000e70 <drawChar+0x200>
        	drawPixel(x+i, y+j, bg);
 8000e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e4e:	b29a      	uxth	r2, r3
 8000e50:	88fb      	ldrh	r3, [r7, #6]
 8000e52:	4413      	add	r3, r2
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	b218      	sxth	r0, r3
 8000e58:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000e5c:	b29a      	uxth	r2, r3
 8000e5e:	88bb      	ldrh	r3, [r7, #4]
 8000e60:	4413      	add	r3, r2
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	b21b      	sxth	r3, r3
 8000e66:	8c3a      	ldrh	r2, [r7, #32]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f7ff fcfb 	bl	8000864 <drawPixel>
 8000e6e:	e046      	b.n	8000efe <drawChar+0x28e>
        else {  // big size
        	fillRect(x+i*size, y+j*size, size + x+i*size, size+1 + y+j*size, bg);
 8000e70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e74:	b29a      	uxth	r2, r3
 8000e76:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	fb12 f303 	smulbb	r3, r2, r3
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	88fb      	ldrh	r3, [r7, #6]
 8000e84:	4413      	add	r3, r2
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	b218      	sxth	r0, r3
 8000e8a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	fb12 f303 	smulbb	r3, r2, r3
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	88bb      	ldrh	r3, [r7, #4]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	b21c      	sxth	r4, r3
 8000ea4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	88fb      	ldrh	r3, [r7, #6]
 8000eac:	4413      	add	r3, r2
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb4:	b299      	uxth	r1, r3
 8000eb6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	fb11 f303 	smulbb	r3, r1, r3
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	4413      	add	r3, r2
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	b21d      	sxth	r5, r3
 8000ec8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000ecc:	b29a      	uxth	r2, r3
 8000ece:	88bb      	ldrh	r3, [r7, #4]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000ed8:	b299      	uxth	r1, r3
 8000eda:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	fb11 f303 	smulbb	r3, r1, r3
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	4413      	add	r3, r2
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	3301      	adds	r3, #1
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	b21a      	sxth	r2, r3
 8000ef0:	8c3b      	ldrh	r3, [r7, #32]
 8000ef2:	9300      	str	r3, [sp, #0]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	462a      	mov	r2, r5
 8000ef8:	4621      	mov	r1, r4
 8000efa:	f7ff fd21 	bl	8000940 <fillRect>
        }
      }
      line >>= 1;
 8000efe:	7bbb      	ldrb	r3, [r7, #14]
 8000f00:	085b      	lsrs	r3, r3, #1
 8000f02:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8000f04:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	737b      	strb	r3, [r7, #13]
 8000f10:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000f14:	2b07      	cmp	r3, #7
 8000f16:	f77f af2c 	ble.w	8000d72 <drawChar+0x102>
  for (int8_t i=0; i<6; i++ ) {
 8000f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	3301      	adds	r3, #1
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	73fb      	strb	r3, [r7, #15]
 8000f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2a:	2b05      	cmp	r3, #5
 8000f2c:	f77f af0b 	ble.w	8000d46 <drawChar+0xd6>
 8000f30:	e002      	b.n	8000f38 <drawChar+0x2c8>
    return;
 8000f32:	bf00      	nop
 8000f34:	e000      	b.n	8000f38 <drawChar+0x2c8>
    return;
 8000f36:	bf00      	nop
    }
  }
}
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bdb0      	pop	{r4, r5, r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000000 	.word	0x20000000
 8000f44:	2000002c 	.word	0x2000002c
 8000f48:	080028a4 	.word	0x080028a4

08000f4c <ILI9488_printText>:
void ILI9488_printText(char text[], int16_t x, int16_t y, uint16_t color, uint16_t bg, uint8_t size)
{
 8000f4c:	b590      	push	{r4, r7, lr}
 8000f4e:	b089      	sub	sp, #36	@ 0x24
 8000f50:	af02      	add	r7, sp, #8
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	4608      	mov	r0, r1
 8000f56:	4611      	mov	r1, r2
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	817b      	strh	r3, [r7, #10]
 8000f5e:	460b      	mov	r3, r1
 8000f60:	813b      	strh	r3, [r7, #8]
 8000f62:	4613      	mov	r3, r2
 8000f64:	80fb      	strh	r3, [r7, #6]
	int16_t offset;
	offset = size*6;
 8000f66:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	0052      	lsls	r2, r2, #1
 8000f70:	4413      	add	r3, r2
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	82bb      	strh	r3, [r7, #20]

	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 8000f78:	2300      	movs	r3, #0
 8000f7a:	82fb      	strh	r3, [r7, #22]
 8000f7c:	e01a      	b.n	8000fb4 <ILI9488_printText+0x68>
	{
		drawChar(x+(offset*i), y, text[i],color,bg,size);
 8000f7e:	8abb      	ldrh	r3, [r7, #20]
 8000f80:	8afa      	ldrh	r2, [r7, #22]
 8000f82:	fb12 f303 	smulbb	r3, r2, r3
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	897b      	ldrh	r3, [r7, #10]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	b218      	sxth	r0, r3
 8000f90:	8afb      	ldrh	r3, [r7, #22]
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	4413      	add	r3, r2
 8000f96:	781a      	ldrb	r2, [r3, #0]
 8000f98:	88fc      	ldrh	r4, [r7, #6]
 8000f9a:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8000f9e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000fa2:	9301      	str	r3, [sp, #4]
 8000fa4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	4623      	mov	r3, r4
 8000faa:	f7ff fe61 	bl	8000c70 <drawChar>
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 8000fae:	8afb      	ldrh	r3, [r7, #22]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	82fb      	strh	r3, [r7, #22]
 8000fb4:	8afb      	ldrh	r3, [r7, #22]
 8000fb6:	2b27      	cmp	r3, #39	@ 0x27
 8000fb8:	d805      	bhi.n	8000fc6 <ILI9488_printText+0x7a>
 8000fba:	8afb      	ldrh	r3, [r7, #22]
 8000fbc:	68fa      	ldr	r2, [r7, #12]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d1db      	bne.n	8000f7e <ILI9488_printText+0x32>
	}
}
 8000fc6:	bf00      	nop
 8000fc8:	371c      	adds	r7, #28
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd90      	pop	{r4, r7, pc}
	...

08000fd0 <write16BitColor>:
	for (y2 = 0; y2 < h; y2 += 6)
		drawLine(x1, y1, x2, y2, color);
}

void write16BitColor(uint16_t color)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	80fb      	strh	r3, [r7, #6]

	  uint8_t r = (color & 0xF800) >> 11;
 8000fda:	88fb      	ldrh	r3, [r7, #6]
 8000fdc:	0adb      	lsrs	r3, r3, #11
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	73fb      	strb	r3, [r7, #15]
	  uint8_t g = (color & 0x07E0) >> 5;
 8000fe2:	88fb      	ldrh	r3, [r7, #6]
 8000fe4:	115b      	asrs	r3, r3, #5
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000fec:	73bb      	strb	r3, [r7, #14]
	  uint8_t b = color & 0x001F;
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	f003 031f 	and.w	r3, r3, #31
 8000ff6:	737b      	strb	r3, [r7, #13]

	  r = (r * 255) / 31;
 8000ff8:	7bfa      	ldrb	r2, [r7, #15]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	021b      	lsls	r3, r3, #8
 8000ffe:	1a9b      	subs	r3, r3, r2
 8001000:	4a17      	ldr	r2, [pc, #92]	@ (8001060 <write16BitColor+0x90>)
 8001002:	fb82 1203 	smull	r1, r2, r2, r3
 8001006:	441a      	add	r2, r3
 8001008:	1112      	asrs	r2, r2, #4
 800100a:	17db      	asrs	r3, r3, #31
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	73fb      	strb	r3, [r7, #15]
	  g = (g * 255) / 63;
 8001010:	7bba      	ldrb	r2, [r7, #14]
 8001012:	4613      	mov	r3, r2
 8001014:	021b      	lsls	r3, r3, #8
 8001016:	1a9b      	subs	r3, r3, r2
 8001018:	4a12      	ldr	r2, [pc, #72]	@ (8001064 <write16BitColor+0x94>)
 800101a:	fb82 1203 	smull	r1, r2, r2, r3
 800101e:	441a      	add	r2, r3
 8001020:	1152      	asrs	r2, r2, #5
 8001022:	17db      	asrs	r3, r3, #31
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	73bb      	strb	r3, [r7, #14]
	  b = (b * 255) / 31;
 8001028:	7b7a      	ldrb	r2, [r7, #13]
 800102a:	4613      	mov	r3, r2
 800102c:	021b      	lsls	r3, r3, #8
 800102e:	1a9b      	subs	r3, r3, r2
 8001030:	4a0b      	ldr	r2, [pc, #44]	@ (8001060 <write16BitColor+0x90>)
 8001032:	fb82 1203 	smull	r1, r2, r2, r3
 8001036:	441a      	add	r2, r3
 8001038:	1112      	asrs	r2, r2, #4
 800103a:	17db      	asrs	r3, r3, #31
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	737b      	strb	r3, [r7, #13]
	  uint8_t data[3] = {r, g, b};
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	723b      	strb	r3, [r7, #8]
 8001044:	7bbb      	ldrb	r3, [r7, #14]
 8001046:	727b      	strb	r3, [r7, #9]
 8001048:	7b7b      	ldrb	r3, [r7, #13]
 800104a:	72bb      	strb	r3, [r7, #10]
	  ILI9488_SendData_Multi(data, 3);
 800104c:	f107 0308 	add.w	r3, r7, #8
 8001050:	2103      	movs	r1, #3
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff faa2 	bl	800059c <ILI9488_SendData_Multi>
	  //HAL_SPI_Transmit(&hspi1, (uint8_t *)&r, 1, 10);
	  //HAL_SPI_Transmit(&hspi1, (uint8_t *)&g, 1, 10);
	  //HAL_SPI_Transmit(&hspi1, (uint8_t *)&b, 1, 10);

}
 8001058:	bf00      	nop
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	84210843 	.word	0x84210843
 8001064:	82082083 	.word	0x82082083

08001068 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800106e:	f000 f9f3 	bl	8001458 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001072:	f000 f81f 	bl	80010b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001076:	f000 f8bb 	bl	80011f0 <MX_GPIO_Init>
  MX_SPI1_Init();
 800107a:	f000 f883 	bl	8001184 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
    ILI9488_Init();
 800107e:	f7ff fac5 	bl	800060c <ILI9488_Init>
    setRotation(1);
 8001082:	2001      	movs	r0, #1
 8001084:	f7ff fda2 	bl	8000bcc <setRotation>
    fillScreen(ILI9488_BLACK);  // Clear screen
 8001088:	2000      	movs	r0, #0
 800108a:	f7ff fc3f 	bl	800090c <fillScreen>
    HAL_Delay(500);
 800108e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001092:	f000 fa53 	bl	800153c <HAL_Delay>
    ILI9488_printText("Hello World", 20, 100, ILI9488_RED, ILI9488_BLACK, 2);
 8001096:	2302      	movs	r3, #2
 8001098:	9301      	str	r3, [sp, #4]
 800109a:	2300      	movs	r3, #0
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80010a2:	2264      	movs	r2, #100	@ 0x64
 80010a4:	2114      	movs	r1, #20
 80010a6:	4802      	ldr	r0, [pc, #8]	@ (80010b0 <main+0x48>)
 80010a8:	f7ff ff50 	bl	8000f4c <ILI9488_printText>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010ac:	bf00      	nop
 80010ae:	e7fd      	b.n	80010ac <main+0x44>
 80010b0:	08002898 	.word	0x08002898

080010b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b094      	sub	sp, #80	@ 0x50
 80010b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ba:	f107 0320 	add.w	r3, r7, #32
 80010be:	2230      	movs	r2, #48	@ 0x30
 80010c0:	2100      	movs	r1, #0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f001 fbb0 	bl	8002828 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c8:	f107 030c 	add.w	r3, r7, #12
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d8:	2300      	movs	r3, #0
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	4b27      	ldr	r3, [pc, #156]	@ (800117c <SystemClock_Config+0xc8>)
 80010de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e0:	4a26      	ldr	r2, [pc, #152]	@ (800117c <SystemClock_Config+0xc8>)
 80010e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80010e8:	4b24      	ldr	r3, [pc, #144]	@ (800117c <SystemClock_Config+0xc8>)
 80010ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010f4:	2300      	movs	r3, #0
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	4b21      	ldr	r3, [pc, #132]	@ (8001180 <SystemClock_Config+0xcc>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a20      	ldr	r2, [pc, #128]	@ (8001180 <SystemClock_Config+0xcc>)
 80010fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001102:	6013      	str	r3, [r2, #0]
 8001104:	4b1e      	ldr	r3, [pc, #120]	@ (8001180 <SystemClock_Config+0xcc>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001110:	2302      	movs	r3, #2
 8001112:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001114:	2301      	movs	r3, #1
 8001116:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001118:	2310      	movs	r3, #16
 800111a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800111c:	2302      	movs	r3, #2
 800111e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001120:	2300      	movs	r3, #0
 8001122:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001124:	2308      	movs	r3, #8
 8001126:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001128:	2364      	movs	r3, #100	@ 0x64
 800112a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800112c:	2302      	movs	r3, #2
 800112e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001130:	2304      	movs	r3, #4
 8001132:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001134:	f107 0320 	add.w	r3, r7, #32
 8001138:	4618      	mov	r0, r3
 800113a:	f000 fca7 	bl	8001a8c <HAL_RCC_OscConfig>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001144:	f000 f8a6 	bl	8001294 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001148:	230f      	movs	r3, #15
 800114a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800114c:	2302      	movs	r3, #2
 800114e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001154:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001158:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800115e:	f107 030c 	add.w	r3, r7, #12
 8001162:	2103      	movs	r1, #3
 8001164:	4618      	mov	r0, r3
 8001166:	f000 ff09 	bl	8001f7c <HAL_RCC_ClockConfig>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001170:	f000 f890 	bl	8001294 <Error_Handler>
  }
}
 8001174:	bf00      	nop
 8001176:	3750      	adds	r7, #80	@ 0x50
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40023800 	.word	0x40023800
 8001180:	40007000 	.word	0x40007000

08001184 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001188:	4b17      	ldr	r3, [pc, #92]	@ (80011e8 <MX_SPI1_Init+0x64>)
 800118a:	4a18      	ldr	r2, [pc, #96]	@ (80011ec <MX_SPI1_Init+0x68>)
 800118c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800118e:	4b16      	ldr	r3, [pc, #88]	@ (80011e8 <MX_SPI1_Init+0x64>)
 8001190:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001194:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001196:	4b14      	ldr	r3, [pc, #80]	@ (80011e8 <MX_SPI1_Init+0x64>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800119c:	4b12      	ldr	r3, [pc, #72]	@ (80011e8 <MX_SPI1_Init+0x64>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011a2:	4b11      	ldr	r3, [pc, #68]	@ (80011e8 <MX_SPI1_Init+0x64>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011a8:	4b0f      	ldr	r3, [pc, #60]	@ (80011e8 <MX_SPI1_Init+0x64>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	@ (80011e8 <MX_SPI1_Init+0x64>)
 80011b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011b6:	4b0c      	ldr	r3, [pc, #48]	@ (80011e8 <MX_SPI1_Init+0x64>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011bc:	4b0a      	ldr	r3, [pc, #40]	@ (80011e8 <MX_SPI1_Init+0x64>)
 80011be:	2200      	movs	r2, #0
 80011c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011c2:	4b09      	ldr	r3, [pc, #36]	@ (80011e8 <MX_SPI1_Init+0x64>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011c8:	4b07      	ldr	r3, [pc, #28]	@ (80011e8 <MX_SPI1_Init+0x64>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011ce:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <MX_SPI1_Init+0x64>)
 80011d0:	220a      	movs	r2, #10
 80011d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011d4:	4804      	ldr	r0, [pc, #16]	@ (80011e8 <MX_SPI1_Init+0x64>)
 80011d6:	f001 f87d 	bl	80022d4 <HAL_SPI_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011e0:	f000 f858 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000044 	.word	0x20000044
 80011ec:	40013000 	.word	0x40013000

080011f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b088      	sub	sp, #32
 80011f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f6:	f107 030c 	add.w	r3, r7, #12
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	4b20      	ldr	r3, [pc, #128]	@ (800128c <MX_GPIO_Init+0x9c>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120e:	4a1f      	ldr	r2, [pc, #124]	@ (800128c <MX_GPIO_Init+0x9c>)
 8001210:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001214:	6313      	str	r3, [r2, #48]	@ 0x30
 8001216:	4b1d      	ldr	r3, [pc, #116]	@ (800128c <MX_GPIO_Init+0x9c>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	4b19      	ldr	r3, [pc, #100]	@ (800128c <MX_GPIO_Init+0x9c>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	4a18      	ldr	r2, [pc, #96]	@ (800128c <MX_GPIO_Init+0x9c>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6313      	str	r3, [r2, #48]	@ 0x30
 8001232:	4b16      	ldr	r3, [pc, #88]	@ (800128c <MX_GPIO_Init+0x9c>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	603b      	str	r3, [r7, #0]
 8001242:	4b12      	ldr	r3, [pc, #72]	@ (800128c <MX_GPIO_Init+0x9c>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	4a11      	ldr	r2, [pc, #68]	@ (800128c <MX_GPIO_Init+0x9c>)
 8001248:	f043 0302 	orr.w	r3, r3, #2
 800124c:	6313      	str	r3, [r2, #48]	@ 0x30
 800124e:	4b0f      	ldr	r3, [pc, #60]	@ (800128c <MX_GPIO_Init+0x9c>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|RST_Pin|DC_Pin, GPIO_PIN_RESET);
 800125a:	2200      	movs	r2, #0
 800125c:	f240 4106 	movw	r1, #1030	@ 0x406
 8001260:	480b      	ldr	r0, [pc, #44]	@ (8001290 <MX_GPIO_Init+0xa0>)
 8001262:	f000 fbf9 	bl	8001a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_Pin RST_Pin DC_Pin */
  GPIO_InitStruct.Pin = CS_Pin|RST_Pin|DC_Pin;
 8001266:	f240 4306 	movw	r3, #1030	@ 0x406
 800126a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126c:	2301      	movs	r3, #1
 800126e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001274:	2300      	movs	r3, #0
 8001276:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001278:	f107 030c 	add.w	r3, r7, #12
 800127c:	4619      	mov	r1, r3
 800127e:	4804      	ldr	r0, [pc, #16]	@ (8001290 <MX_GPIO_Init+0xa0>)
 8001280:	f000 fa66 	bl	8001750 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001284:	bf00      	nop
 8001286:	3720      	adds	r7, #32
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40023800 	.word	0x40023800
 8001290:	40020400 	.word	0x40020400

08001294 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001298:	b672      	cpsid	i
}
 800129a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800129c:	bf00      	nop
 800129e:	e7fd      	b.n	800129c <Error_Handler+0x8>

080012a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	4b10      	ldr	r3, [pc, #64]	@ (80012ec <HAL_MspInit+0x4c>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ae:	4a0f      	ldr	r2, [pc, #60]	@ (80012ec <HAL_MspInit+0x4c>)
 80012b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012b6:	4b0d      	ldr	r3, [pc, #52]	@ (80012ec <HAL_MspInit+0x4c>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	603b      	str	r3, [r7, #0]
 80012c6:	4b09      	ldr	r3, [pc, #36]	@ (80012ec <HAL_MspInit+0x4c>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ca:	4a08      	ldr	r2, [pc, #32]	@ (80012ec <HAL_MspInit+0x4c>)
 80012cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012d2:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <HAL_MspInit+0x4c>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012da:	603b      	str	r3, [r7, #0]
 80012dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	40023800 	.word	0x40023800

080012f0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08a      	sub	sp, #40	@ 0x28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a19      	ldr	r2, [pc, #100]	@ (8001374 <HAL_SPI_MspInit+0x84>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d12b      	bne.n	800136a <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	4b18      	ldr	r3, [pc, #96]	@ (8001378 <HAL_SPI_MspInit+0x88>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800131a:	4a17      	ldr	r2, [pc, #92]	@ (8001378 <HAL_SPI_MspInit+0x88>)
 800131c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001320:	6453      	str	r3, [r2, #68]	@ 0x44
 8001322:	4b15      	ldr	r3, [pc, #84]	@ (8001378 <HAL_SPI_MspInit+0x88>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001326:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	4b11      	ldr	r3, [pc, #68]	@ (8001378 <HAL_SPI_MspInit+0x88>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	4a10      	ldr	r2, [pc, #64]	@ (8001378 <HAL_SPI_MspInit+0x88>)
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	6313      	str	r3, [r2, #48]	@ 0x30
 800133e:	4b0e      	ldr	r3, [pc, #56]	@ (8001378 <HAL_SPI_MspInit+0x88>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800134a:	23e0      	movs	r3, #224	@ 0xe0
 800134c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	2302      	movs	r3, #2
 8001350:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001356:	2303      	movs	r3, #3
 8001358:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800135a:	2305      	movs	r3, #5
 800135c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	4619      	mov	r1, r3
 8001364:	4805      	ldr	r0, [pc, #20]	@ (800137c <HAL_SPI_MspInit+0x8c>)
 8001366:	f000 f9f3 	bl	8001750 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800136a:	bf00      	nop
 800136c:	3728      	adds	r7, #40	@ 0x28
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40013000 	.word	0x40013000
 8001378:	40023800 	.word	0x40023800
 800137c:	40020000 	.word	0x40020000

08001380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001384:	bf00      	nop
 8001386:	e7fd      	b.n	8001384 <NMI_Handler+0x4>

08001388 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800138c:	bf00      	nop
 800138e:	e7fd      	b.n	800138c <HardFault_Handler+0x4>

08001390 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001394:	bf00      	nop
 8001396:	e7fd      	b.n	8001394 <MemManage_Handler+0x4>

08001398 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800139c:	bf00      	nop
 800139e:	e7fd      	b.n	800139c <BusFault_Handler+0x4>

080013a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a4:	bf00      	nop
 80013a6:	e7fd      	b.n	80013a4 <UsageFault_Handler+0x4>

080013a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013d6:	f000 f891 	bl	80014fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
	...

080013e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013e4:	4b06      	ldr	r3, [pc, #24]	@ (8001400 <SystemInit+0x20>)
 80013e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013ea:	4a05      	ldr	r2, [pc, #20]	@ (8001400 <SystemInit+0x20>)
 80013ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	e000ed00 	.word	0xe000ed00

08001404 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001404:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800143c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001408:	f7ff ffea 	bl	80013e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800140c:	480c      	ldr	r0, [pc, #48]	@ (8001440 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800140e:	490d      	ldr	r1, [pc, #52]	@ (8001444 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001410:	4a0d      	ldr	r2, [pc, #52]	@ (8001448 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001414:	e002      	b.n	800141c <LoopCopyDataInit>

08001416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800141a:	3304      	adds	r3, #4

0800141c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800141c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800141e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001420:	d3f9      	bcc.n	8001416 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001422:	4a0a      	ldr	r2, [pc, #40]	@ (800144c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001424:	4c0a      	ldr	r4, [pc, #40]	@ (8001450 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001428:	e001      	b.n	800142e <LoopFillZerobss>

0800142a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800142a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800142c:	3204      	adds	r2, #4

0800142e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800142e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001430:	d3fb      	bcc.n	800142a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001432:	f001 fa01 	bl	8002838 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001436:	f7ff fe17 	bl	8001068 <main>
  bx  lr    
 800143a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800143c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001440:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001444:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001448:	08002dc4 	.word	0x08002dc4
  ldr r2, =_sbss
 800144c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001450:	200000a0 	.word	0x200000a0

08001454 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001454:	e7fe      	b.n	8001454 <ADC_IRQHandler>
	...

08001458 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800145c:	4b0e      	ldr	r3, [pc, #56]	@ (8001498 <HAL_Init+0x40>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a0d      	ldr	r2, [pc, #52]	@ (8001498 <HAL_Init+0x40>)
 8001462:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001466:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001468:	4b0b      	ldr	r3, [pc, #44]	@ (8001498 <HAL_Init+0x40>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a0a      	ldr	r2, [pc, #40]	@ (8001498 <HAL_Init+0x40>)
 800146e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001472:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001474:	4b08      	ldr	r3, [pc, #32]	@ (8001498 <HAL_Init+0x40>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a07      	ldr	r2, [pc, #28]	@ (8001498 <HAL_Init+0x40>)
 800147a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800147e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001480:	2003      	movs	r0, #3
 8001482:	f000 f931 	bl	80016e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001486:	200f      	movs	r0, #15
 8001488:	f000 f808 	bl	800149c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800148c:	f7ff ff08 	bl	80012a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40023c00 	.word	0x40023c00

0800149c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014a4:	4b12      	ldr	r3, [pc, #72]	@ (80014f0 <HAL_InitTick+0x54>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4b12      	ldr	r3, [pc, #72]	@ (80014f4 <HAL_InitTick+0x58>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	4619      	mov	r1, r3
 80014ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ba:	4618      	mov	r0, r3
 80014bc:	f000 f93b 	bl	8001736 <HAL_SYSTICK_Config>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e00e      	b.n	80014e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2b0f      	cmp	r3, #15
 80014ce:	d80a      	bhi.n	80014e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d0:	2200      	movs	r2, #0
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	f04f 30ff 	mov.w	r0, #4294967295
 80014d8:	f000 f911 	bl	80016fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014dc:	4a06      	ldr	r2, [pc, #24]	@ (80014f8 <HAL_InitTick+0x5c>)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
 80014e4:	e000      	b.n	80014e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000004 	.word	0x20000004
 80014f4:	2000000c 	.word	0x2000000c
 80014f8:	20000008 	.word	0x20000008

080014fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001500:	4b06      	ldr	r3, [pc, #24]	@ (800151c <HAL_IncTick+0x20>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	461a      	mov	r2, r3
 8001506:	4b06      	ldr	r3, [pc, #24]	@ (8001520 <HAL_IncTick+0x24>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4413      	add	r3, r2
 800150c:	4a04      	ldr	r2, [pc, #16]	@ (8001520 <HAL_IncTick+0x24>)
 800150e:	6013      	str	r3, [r2, #0]
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	2000000c 	.word	0x2000000c
 8001520:	2000009c 	.word	0x2000009c

08001524 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return uwTick;
 8001528:	4b03      	ldr	r3, [pc, #12]	@ (8001538 <HAL_GetTick+0x14>)
 800152a:	681b      	ldr	r3, [r3, #0]
}
 800152c:	4618      	mov	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	2000009c 	.word	0x2000009c

0800153c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001544:	f7ff ffee 	bl	8001524 <HAL_GetTick>
 8001548:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001554:	d005      	beq.n	8001562 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001556:	4b0a      	ldr	r3, [pc, #40]	@ (8001580 <HAL_Delay+0x44>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	461a      	mov	r2, r3
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	4413      	add	r3, r2
 8001560:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001562:	bf00      	nop
 8001564:	f7ff ffde 	bl	8001524 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	429a      	cmp	r2, r3
 8001572:	d8f7      	bhi.n	8001564 <HAL_Delay+0x28>
  {
  }
}
 8001574:	bf00      	nop
 8001576:	bf00      	nop
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	2000000c 	.word	0x2000000c

08001584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001594:	4b0c      	ldr	r3, [pc, #48]	@ (80015c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015a0:	4013      	ands	r3, r2
 80015a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015b6:	4a04      	ldr	r2, [pc, #16]	@ (80015c8 <__NVIC_SetPriorityGrouping+0x44>)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	60d3      	str	r3, [r2, #12]
}
 80015bc:	bf00      	nop
 80015be:	3714      	adds	r7, #20
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d0:	4b04      	ldr	r3, [pc, #16]	@ (80015e4 <__NVIC_GetPriorityGrouping+0x18>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	0a1b      	lsrs	r3, r3, #8
 80015d6:	f003 0307 	and.w	r3, r3, #7
}
 80015da:	4618      	mov	r0, r3
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	6039      	str	r1, [r7, #0]
 80015f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	db0a      	blt.n	8001612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	490c      	ldr	r1, [pc, #48]	@ (8001634 <__NVIC_SetPriority+0x4c>)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	0112      	lsls	r2, r2, #4
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	440b      	add	r3, r1
 800160c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001610:	e00a      	b.n	8001628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	b2da      	uxtb	r2, r3
 8001616:	4908      	ldr	r1, [pc, #32]	@ (8001638 <__NVIC_SetPriority+0x50>)
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	3b04      	subs	r3, #4
 8001620:	0112      	lsls	r2, r2, #4
 8001622:	b2d2      	uxtb	r2, r2
 8001624:	440b      	add	r3, r1
 8001626:	761a      	strb	r2, [r3, #24]
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	e000e100 	.word	0xe000e100
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800163c:	b480      	push	{r7}
 800163e:	b089      	sub	sp, #36	@ 0x24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f1c3 0307 	rsb	r3, r3, #7
 8001656:	2b04      	cmp	r3, #4
 8001658:	bf28      	it	cs
 800165a:	2304      	movcs	r3, #4
 800165c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3304      	adds	r3, #4
 8001662:	2b06      	cmp	r3, #6
 8001664:	d902      	bls.n	800166c <NVIC_EncodePriority+0x30>
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3b03      	subs	r3, #3
 800166a:	e000      	b.n	800166e <NVIC_EncodePriority+0x32>
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001670:	f04f 32ff 	mov.w	r2, #4294967295
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43da      	mvns	r2, r3
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	401a      	ands	r2, r3
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001684:	f04f 31ff 	mov.w	r1, #4294967295
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	fa01 f303 	lsl.w	r3, r1, r3
 800168e:	43d9      	mvns	r1, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001694:	4313      	orrs	r3, r2
         );
}
 8001696:	4618      	mov	r0, r3
 8001698:	3724      	adds	r7, #36	@ 0x24
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
	...

080016a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016b4:	d301      	bcc.n	80016ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016b6:	2301      	movs	r3, #1
 80016b8:	e00f      	b.n	80016da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ba:	4a0a      	ldr	r2, [pc, #40]	@ (80016e4 <SysTick_Config+0x40>)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3b01      	subs	r3, #1
 80016c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016c2:	210f      	movs	r1, #15
 80016c4:	f04f 30ff 	mov.w	r0, #4294967295
 80016c8:	f7ff ff8e 	bl	80015e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016cc:	4b05      	ldr	r3, [pc, #20]	@ (80016e4 <SysTick_Config+0x40>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016d2:	4b04      	ldr	r3, [pc, #16]	@ (80016e4 <SysTick_Config+0x40>)
 80016d4:	2207      	movs	r2, #7
 80016d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	e000e010 	.word	0xe000e010

080016e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff ff47 	bl	8001584 <__NVIC_SetPriorityGrouping>
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016fe:	b580      	push	{r7, lr}
 8001700:	b086      	sub	sp, #24
 8001702:	af00      	add	r7, sp, #0
 8001704:	4603      	mov	r3, r0
 8001706:	60b9      	str	r1, [r7, #8]
 8001708:	607a      	str	r2, [r7, #4]
 800170a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001710:	f7ff ff5c 	bl	80015cc <__NVIC_GetPriorityGrouping>
 8001714:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	68b9      	ldr	r1, [r7, #8]
 800171a:	6978      	ldr	r0, [r7, #20]
 800171c:	f7ff ff8e 	bl	800163c <NVIC_EncodePriority>
 8001720:	4602      	mov	r2, r0
 8001722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001726:	4611      	mov	r1, r2
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff ff5d 	bl	80015e8 <__NVIC_SetPriority>
}
 800172e:	bf00      	nop
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff ffb0 	bl	80016a4 <SysTick_Config>
 8001744:	4603      	mov	r3, r0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001750:	b480      	push	{r7}
 8001752:	b089      	sub	sp, #36	@ 0x24
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800175e:	2300      	movs	r3, #0
 8001760:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001762:	2300      	movs	r3, #0
 8001764:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001766:	2300      	movs	r3, #0
 8001768:	61fb      	str	r3, [r7, #28]
 800176a:	e159      	b.n	8001a20 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800176c:	2201      	movs	r2, #1
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	697a      	ldr	r2, [r7, #20]
 800177c:	4013      	ands	r3, r2
 800177e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	429a      	cmp	r2, r3
 8001786:	f040 8148 	bne.w	8001a1a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	2b01      	cmp	r3, #1
 8001794:	d005      	beq.n	80017a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d130      	bne.n	8001804 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	2203      	movs	r2, #3
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43db      	mvns	r3, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4013      	ands	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	68da      	ldr	r2, [r3, #12]
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017d8:	2201      	movs	r2, #1
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4013      	ands	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	091b      	lsrs	r3, r3, #4
 80017ee:	f003 0201 	and.w	r2, r3, #1
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	2b03      	cmp	r3, #3
 800180e:	d017      	beq.n	8001840 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	2203      	movs	r2, #3
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	4013      	ands	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4313      	orrs	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f003 0303 	and.w	r3, r3, #3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d123      	bne.n	8001894 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	08da      	lsrs	r2, r3, #3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3208      	adds	r2, #8
 8001854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001858:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	f003 0307 	and.w	r3, r3, #7
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	220f      	movs	r2, #15
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	691a      	ldr	r2, [r3, #16]
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	08da      	lsrs	r2, r3, #3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3208      	adds	r2, #8
 800188e:	69b9      	ldr	r1, [r7, #24]
 8001890:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	2203      	movs	r2, #3
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4013      	ands	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 0203 	and.w	r2, r3, #3
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4313      	orrs	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f000 80a2 	beq.w	8001a1a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	4b57      	ldr	r3, [pc, #348]	@ (8001a38 <HAL_GPIO_Init+0x2e8>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018de:	4a56      	ldr	r2, [pc, #344]	@ (8001a38 <HAL_GPIO_Init+0x2e8>)
 80018e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80018e6:	4b54      	ldr	r3, [pc, #336]	@ (8001a38 <HAL_GPIO_Init+0x2e8>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018f2:	4a52      	ldr	r2, [pc, #328]	@ (8001a3c <HAL_GPIO_Init+0x2ec>)
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	089b      	lsrs	r3, r3, #2
 80018f8:	3302      	adds	r3, #2
 80018fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	220f      	movs	r2, #15
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4013      	ands	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a49      	ldr	r2, [pc, #292]	@ (8001a40 <HAL_GPIO_Init+0x2f0>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d019      	beq.n	8001952 <HAL_GPIO_Init+0x202>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a48      	ldr	r2, [pc, #288]	@ (8001a44 <HAL_GPIO_Init+0x2f4>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d013      	beq.n	800194e <HAL_GPIO_Init+0x1fe>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a47      	ldr	r2, [pc, #284]	@ (8001a48 <HAL_GPIO_Init+0x2f8>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d00d      	beq.n	800194a <HAL_GPIO_Init+0x1fa>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a46      	ldr	r2, [pc, #280]	@ (8001a4c <HAL_GPIO_Init+0x2fc>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d007      	beq.n	8001946 <HAL_GPIO_Init+0x1f6>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a45      	ldr	r2, [pc, #276]	@ (8001a50 <HAL_GPIO_Init+0x300>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d101      	bne.n	8001942 <HAL_GPIO_Init+0x1f2>
 800193e:	2304      	movs	r3, #4
 8001940:	e008      	b.n	8001954 <HAL_GPIO_Init+0x204>
 8001942:	2307      	movs	r3, #7
 8001944:	e006      	b.n	8001954 <HAL_GPIO_Init+0x204>
 8001946:	2303      	movs	r3, #3
 8001948:	e004      	b.n	8001954 <HAL_GPIO_Init+0x204>
 800194a:	2302      	movs	r3, #2
 800194c:	e002      	b.n	8001954 <HAL_GPIO_Init+0x204>
 800194e:	2301      	movs	r3, #1
 8001950:	e000      	b.n	8001954 <HAL_GPIO_Init+0x204>
 8001952:	2300      	movs	r3, #0
 8001954:	69fa      	ldr	r2, [r7, #28]
 8001956:	f002 0203 	and.w	r2, r2, #3
 800195a:	0092      	lsls	r2, r2, #2
 800195c:	4093      	lsls	r3, r2
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4313      	orrs	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001964:	4935      	ldr	r1, [pc, #212]	@ (8001a3c <HAL_GPIO_Init+0x2ec>)
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	089b      	lsrs	r3, r3, #2
 800196a:	3302      	adds	r3, #2
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001972:	4b38      	ldr	r3, [pc, #224]	@ (8001a54 <HAL_GPIO_Init+0x304>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	43db      	mvns	r3, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4013      	ands	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001996:	4a2f      	ldr	r2, [pc, #188]	@ (8001a54 <HAL_GPIO_Init+0x304>)
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800199c:	4b2d      	ldr	r3, [pc, #180]	@ (8001a54 <HAL_GPIO_Init+0x304>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	43db      	mvns	r3, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4013      	ands	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d003      	beq.n	80019c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	4313      	orrs	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019c0:	4a24      	ldr	r2, [pc, #144]	@ (8001a54 <HAL_GPIO_Init+0x304>)
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019c6:	4b23      	ldr	r3, [pc, #140]	@ (8001a54 <HAL_GPIO_Init+0x304>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	43db      	mvns	r3, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4013      	ands	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019ea:	4a1a      	ldr	r2, [pc, #104]	@ (8001a54 <HAL_GPIO_Init+0x304>)
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019f0:	4b18      	ldr	r3, [pc, #96]	@ (8001a54 <HAL_GPIO_Init+0x304>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	43db      	mvns	r3, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4013      	ands	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a14:	4a0f      	ldr	r2, [pc, #60]	@ (8001a54 <HAL_GPIO_Init+0x304>)
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	61fb      	str	r3, [r7, #28]
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	2b0f      	cmp	r3, #15
 8001a24:	f67f aea2 	bls.w	800176c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a28:	bf00      	nop
 8001a2a:	bf00      	nop
 8001a2c:	3724      	adds	r7, #36	@ 0x24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40013800 	.word	0x40013800
 8001a40:	40020000 	.word	0x40020000
 8001a44:	40020400 	.word	0x40020400
 8001a48:	40020800 	.word	0x40020800
 8001a4c:	40020c00 	.word	0x40020c00
 8001a50:	40021000 	.word	0x40021000
 8001a54:	40013c00 	.word	0x40013c00

08001a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	807b      	strh	r3, [r7, #2]
 8001a64:	4613      	mov	r3, r2
 8001a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a68:	787b      	ldrb	r3, [r7, #1]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a6e:	887a      	ldrh	r2, [r7, #2]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a74:	e003      	b.n	8001a7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a76:	887b      	ldrh	r3, [r7, #2]
 8001a78:	041a      	lsls	r2, r3, #16
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	619a      	str	r2, [r3, #24]
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
	...

08001a8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e267      	b.n	8001f6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d075      	beq.n	8001b96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001aaa:	4b88      	ldr	r3, [pc, #544]	@ (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 030c 	and.w	r3, r3, #12
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	d00c      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ab6:	4b85      	ldr	r3, [pc, #532]	@ (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001abe:	2b08      	cmp	r3, #8
 8001ac0:	d112      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ac2:	4b82      	ldr	r3, [pc, #520]	@ (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001aca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ace:	d10b      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad0:	4b7e      	ldr	r3, [pc, #504]	@ (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d05b      	beq.n	8001b94 <HAL_RCC_OscConfig+0x108>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d157      	bne.n	8001b94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e242      	b.n	8001f6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001af0:	d106      	bne.n	8001b00 <HAL_RCC_OscConfig+0x74>
 8001af2:	4b76      	ldr	r3, [pc, #472]	@ (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a75      	ldr	r2, [pc, #468]	@ (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001af8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	e01d      	b.n	8001b3c <HAL_RCC_OscConfig+0xb0>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b08:	d10c      	bne.n	8001b24 <HAL_RCC_OscConfig+0x98>
 8001b0a:	4b70      	ldr	r3, [pc, #448]	@ (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a6f      	ldr	r2, [pc, #444]	@ (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001b10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	4b6d      	ldr	r3, [pc, #436]	@ (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a6c      	ldr	r2, [pc, #432]	@ (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001b1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b20:	6013      	str	r3, [r2, #0]
 8001b22:	e00b      	b.n	8001b3c <HAL_RCC_OscConfig+0xb0>
 8001b24:	4b69      	ldr	r3, [pc, #420]	@ (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a68      	ldr	r2, [pc, #416]	@ (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001b2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	4b66      	ldr	r3, [pc, #408]	@ (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a65      	ldr	r2, [pc, #404]	@ (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001b36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d013      	beq.n	8001b6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b44:	f7ff fcee 	bl	8001524 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b4c:	f7ff fcea 	bl	8001524 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b64      	cmp	r3, #100	@ 0x64
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e207      	b.n	8001f6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5e:	4b5b      	ldr	r3, [pc, #364]	@ (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0f0      	beq.n	8001b4c <HAL_RCC_OscConfig+0xc0>
 8001b6a:	e014      	b.n	8001b96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6c:	f7ff fcda 	bl	8001524 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b74:	f7ff fcd6 	bl	8001524 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b64      	cmp	r3, #100	@ 0x64
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e1f3      	b.n	8001f6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b86:	4b51      	ldr	r3, [pc, #324]	@ (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1f0      	bne.n	8001b74 <HAL_RCC_OscConfig+0xe8>
 8001b92:	e000      	b.n	8001b96 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d063      	beq.n	8001c6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001ba2:	4b4a      	ldr	r3, [pc, #296]	@ (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00b      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bae:	4b47      	ldr	r3, [pc, #284]	@ (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	d11c      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bba:	4b44      	ldr	r3, [pc, #272]	@ (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d116      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc6:	4b41      	ldr	r3, [pc, #260]	@ (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d005      	beq.n	8001bde <HAL_RCC_OscConfig+0x152>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d001      	beq.n	8001bde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e1c7      	b.n	8001f6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bde:	4b3b      	ldr	r3, [pc, #236]	@ (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	4937      	ldr	r1, [pc, #220]	@ (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bf2:	e03a      	b.n	8001c6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d020      	beq.n	8001c3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bfc:	4b34      	ldr	r3, [pc, #208]	@ (8001cd0 <HAL_RCC_OscConfig+0x244>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c02:	f7ff fc8f 	bl	8001524 <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c0a:	f7ff fc8b 	bl	8001524 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e1a8      	b.n	8001f6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1c:	4b2b      	ldr	r3, [pc, #172]	@ (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0f0      	beq.n	8001c0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c28:	4b28      	ldr	r3, [pc, #160]	@ (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	4925      	ldr	r1, [pc, #148]	@ (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	600b      	str	r3, [r1, #0]
 8001c3c:	e015      	b.n	8001c6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c3e:	4b24      	ldr	r3, [pc, #144]	@ (8001cd0 <HAL_RCC_OscConfig+0x244>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c44:	f7ff fc6e 	bl	8001524 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c4c:	f7ff fc6a 	bl	8001524 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e187      	b.n	8001f6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1f0      	bne.n	8001c4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d036      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d016      	beq.n	8001cac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c7e:	4b15      	ldr	r3, [pc, #84]	@ (8001cd4 <HAL_RCC_OscConfig+0x248>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c84:	f7ff fc4e 	bl	8001524 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c8c:	f7ff fc4a 	bl	8001524 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e167      	b.n	8001f6e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001ccc <HAL_RCC_OscConfig+0x240>)
 8001ca0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0f0      	beq.n	8001c8c <HAL_RCC_OscConfig+0x200>
 8001caa:	e01b      	b.n	8001ce4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cac:	4b09      	ldr	r3, [pc, #36]	@ (8001cd4 <HAL_RCC_OscConfig+0x248>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb2:	f7ff fc37 	bl	8001524 <HAL_GetTick>
 8001cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cb8:	e00e      	b.n	8001cd8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cba:	f7ff fc33 	bl	8001524 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d907      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e150      	b.n	8001f6e <HAL_RCC_OscConfig+0x4e2>
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	42470000 	.word	0x42470000
 8001cd4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd8:	4b88      	ldr	r3, [pc, #544]	@ (8001efc <HAL_RCC_OscConfig+0x470>)
 8001cda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1ea      	bne.n	8001cba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f000 8097 	beq.w	8001e20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cf6:	4b81      	ldr	r3, [pc, #516]	@ (8001efc <HAL_RCC_OscConfig+0x470>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10f      	bne.n	8001d22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	4b7d      	ldr	r3, [pc, #500]	@ (8001efc <HAL_RCC_OscConfig+0x470>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0a:	4a7c      	ldr	r2, [pc, #496]	@ (8001efc <HAL_RCC_OscConfig+0x470>)
 8001d0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d10:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d12:	4b7a      	ldr	r3, [pc, #488]	@ (8001efc <HAL_RCC_OscConfig+0x470>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d22:	4b77      	ldr	r3, [pc, #476]	@ (8001f00 <HAL_RCC_OscConfig+0x474>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d118      	bne.n	8001d60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d2e:	4b74      	ldr	r3, [pc, #464]	@ (8001f00 <HAL_RCC_OscConfig+0x474>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a73      	ldr	r2, [pc, #460]	@ (8001f00 <HAL_RCC_OscConfig+0x474>)
 8001d34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d3a:	f7ff fbf3 	bl	8001524 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d42:	f7ff fbef 	bl	8001524 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e10c      	b.n	8001f6e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d54:	4b6a      	ldr	r3, [pc, #424]	@ (8001f00 <HAL_RCC_OscConfig+0x474>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0f0      	beq.n	8001d42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d106      	bne.n	8001d76 <HAL_RCC_OscConfig+0x2ea>
 8001d68:	4b64      	ldr	r3, [pc, #400]	@ (8001efc <HAL_RCC_OscConfig+0x470>)
 8001d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d6c:	4a63      	ldr	r2, [pc, #396]	@ (8001efc <HAL_RCC_OscConfig+0x470>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d74:	e01c      	b.n	8001db0 <HAL_RCC_OscConfig+0x324>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	2b05      	cmp	r3, #5
 8001d7c:	d10c      	bne.n	8001d98 <HAL_RCC_OscConfig+0x30c>
 8001d7e:	4b5f      	ldr	r3, [pc, #380]	@ (8001efc <HAL_RCC_OscConfig+0x470>)
 8001d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d82:	4a5e      	ldr	r2, [pc, #376]	@ (8001efc <HAL_RCC_OscConfig+0x470>)
 8001d84:	f043 0304 	orr.w	r3, r3, #4
 8001d88:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d8a:	4b5c      	ldr	r3, [pc, #368]	@ (8001efc <HAL_RCC_OscConfig+0x470>)
 8001d8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d8e:	4a5b      	ldr	r2, [pc, #364]	@ (8001efc <HAL_RCC_OscConfig+0x470>)
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d96:	e00b      	b.n	8001db0 <HAL_RCC_OscConfig+0x324>
 8001d98:	4b58      	ldr	r3, [pc, #352]	@ (8001efc <HAL_RCC_OscConfig+0x470>)
 8001d9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d9c:	4a57      	ldr	r2, [pc, #348]	@ (8001efc <HAL_RCC_OscConfig+0x470>)
 8001d9e:	f023 0301 	bic.w	r3, r3, #1
 8001da2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001da4:	4b55      	ldr	r3, [pc, #340]	@ (8001efc <HAL_RCC_OscConfig+0x470>)
 8001da6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001da8:	4a54      	ldr	r2, [pc, #336]	@ (8001efc <HAL_RCC_OscConfig+0x470>)
 8001daa:	f023 0304 	bic.w	r3, r3, #4
 8001dae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d015      	beq.n	8001de4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db8:	f7ff fbb4 	bl	8001524 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dbe:	e00a      	b.n	8001dd6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc0:	f7ff fbb0 	bl	8001524 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e0cb      	b.n	8001f6e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd6:	4b49      	ldr	r3, [pc, #292]	@ (8001efc <HAL_RCC_OscConfig+0x470>)
 8001dd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0ee      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x334>
 8001de2:	e014      	b.n	8001e0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de4:	f7ff fb9e 	bl	8001524 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dea:	e00a      	b.n	8001e02 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dec:	f7ff fb9a 	bl	8001524 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e0b5      	b.n	8001f6e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e02:	4b3e      	ldr	r3, [pc, #248]	@ (8001efc <HAL_RCC_OscConfig+0x470>)
 8001e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1ee      	bne.n	8001dec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e0e:	7dfb      	ldrb	r3, [r7, #23]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d105      	bne.n	8001e20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e14:	4b39      	ldr	r3, [pc, #228]	@ (8001efc <HAL_RCC_OscConfig+0x470>)
 8001e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e18:	4a38      	ldr	r2, [pc, #224]	@ (8001efc <HAL_RCC_OscConfig+0x470>)
 8001e1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e1e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f000 80a1 	beq.w	8001f6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e2a:	4b34      	ldr	r3, [pc, #208]	@ (8001efc <HAL_RCC_OscConfig+0x470>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 030c 	and.w	r3, r3, #12
 8001e32:	2b08      	cmp	r3, #8
 8001e34:	d05c      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d141      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e3e:	4b31      	ldr	r3, [pc, #196]	@ (8001f04 <HAL_RCC_OscConfig+0x478>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e44:	f7ff fb6e 	bl	8001524 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e4c:	f7ff fb6a 	bl	8001524 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e087      	b.n	8001f6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e5e:	4b27      	ldr	r3, [pc, #156]	@ (8001efc <HAL_RCC_OscConfig+0x470>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1f0      	bne.n	8001e4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69da      	ldr	r2, [r3, #28]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	431a      	orrs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e78:	019b      	lsls	r3, r3, #6
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e80:	085b      	lsrs	r3, r3, #1
 8001e82:	3b01      	subs	r3, #1
 8001e84:	041b      	lsls	r3, r3, #16
 8001e86:	431a      	orrs	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e8c:	061b      	lsls	r3, r3, #24
 8001e8e:	491b      	ldr	r1, [pc, #108]	@ (8001efc <HAL_RCC_OscConfig+0x470>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e94:	4b1b      	ldr	r3, [pc, #108]	@ (8001f04 <HAL_RCC_OscConfig+0x478>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9a:	f7ff fb43 	bl	8001524 <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea2:	f7ff fb3f 	bl	8001524 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e05c      	b.n	8001f6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eb4:	4b11      	ldr	r3, [pc, #68]	@ (8001efc <HAL_RCC_OscConfig+0x470>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d0f0      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x416>
 8001ec0:	e054      	b.n	8001f6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ec2:	4b10      	ldr	r3, [pc, #64]	@ (8001f04 <HAL_RCC_OscConfig+0x478>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec8:	f7ff fb2c 	bl	8001524 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed0:	f7ff fb28 	bl	8001524 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e045      	b.n	8001f6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ee2:	4b06      	ldr	r3, [pc, #24]	@ (8001efc <HAL_RCC_OscConfig+0x470>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x444>
 8001eee:	e03d      	b.n	8001f6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d107      	bne.n	8001f08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e038      	b.n	8001f6e <HAL_RCC_OscConfig+0x4e2>
 8001efc:	40023800 	.word	0x40023800
 8001f00:	40007000 	.word	0x40007000
 8001f04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f08:	4b1b      	ldr	r3, [pc, #108]	@ (8001f78 <HAL_RCC_OscConfig+0x4ec>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d028      	beq.n	8001f68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d121      	bne.n	8001f68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d11a      	bne.n	8001f68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f38:	4013      	ands	r3, r2
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d111      	bne.n	8001f68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f4e:	085b      	lsrs	r3, r3, #1
 8001f50:	3b01      	subs	r3, #1
 8001f52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d107      	bne.n	8001f68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d001      	beq.n	8001f6c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e000      	b.n	8001f6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40023800 	.word	0x40023800

08001f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e0cc      	b.n	800212a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f90:	4b68      	ldr	r3, [pc, #416]	@ (8002134 <HAL_RCC_ClockConfig+0x1b8>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d90c      	bls.n	8001fb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9e:	4b65      	ldr	r3, [pc, #404]	@ (8002134 <HAL_RCC_ClockConfig+0x1b8>)
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa6:	4b63      	ldr	r3, [pc, #396]	@ (8002134 <HAL_RCC_ClockConfig+0x1b8>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d001      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e0b8      	b.n	800212a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d020      	beq.n	8002006 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d005      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fd0:	4b59      	ldr	r3, [pc, #356]	@ (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	4a58      	ldr	r2, [pc, #352]	@ (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001fda:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0308 	and.w	r3, r3, #8
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d005      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fe8:	4b53      	ldr	r3, [pc, #332]	@ (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	4a52      	ldr	r2, [pc, #328]	@ (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 8001fee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001ff2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ff4:	4b50      	ldr	r3, [pc, #320]	@ (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	494d      	ldr	r1, [pc, #308]	@ (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 8002002:	4313      	orrs	r3, r2
 8002004:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b00      	cmp	r3, #0
 8002010:	d044      	beq.n	800209c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d107      	bne.n	800202a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201a:	4b47      	ldr	r3, [pc, #284]	@ (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d119      	bne.n	800205a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e07f      	b.n	800212a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2b02      	cmp	r3, #2
 8002030:	d003      	beq.n	800203a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002036:	2b03      	cmp	r3, #3
 8002038:	d107      	bne.n	800204a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800203a:	4b3f      	ldr	r3, [pc, #252]	@ (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d109      	bne.n	800205a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e06f      	b.n	800212a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800204a:	4b3b      	ldr	r3, [pc, #236]	@ (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e067      	b.n	800212a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800205a:	4b37      	ldr	r3, [pc, #220]	@ (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f023 0203 	bic.w	r2, r3, #3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	4934      	ldr	r1, [pc, #208]	@ (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 8002068:	4313      	orrs	r3, r2
 800206a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800206c:	f7ff fa5a 	bl	8001524 <HAL_GetTick>
 8002070:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002072:	e00a      	b.n	800208a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002074:	f7ff fa56 	bl	8001524 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002082:	4293      	cmp	r3, r2
 8002084:	d901      	bls.n	800208a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e04f      	b.n	800212a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208a:	4b2b      	ldr	r3, [pc, #172]	@ (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 020c 	and.w	r2, r3, #12
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	429a      	cmp	r2, r3
 800209a:	d1eb      	bne.n	8002074 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800209c:	4b25      	ldr	r3, [pc, #148]	@ (8002134 <HAL_RCC_ClockConfig+0x1b8>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d20c      	bcs.n	80020c4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020aa:	4b22      	ldr	r3, [pc, #136]	@ (8002134 <HAL_RCC_ClockConfig+0x1b8>)
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	b2d2      	uxtb	r2, r2
 80020b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b2:	4b20      	ldr	r3, [pc, #128]	@ (8002134 <HAL_RCC_ClockConfig+0x1b8>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d001      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e032      	b.n	800212a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d008      	beq.n	80020e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020d0:	4b19      	ldr	r3, [pc, #100]	@ (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	4916      	ldr	r1, [pc, #88]	@ (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0308 	and.w	r3, r3, #8
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d009      	beq.n	8002102 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020ee:	4b12      	ldr	r3, [pc, #72]	@ (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	490e      	ldr	r1, [pc, #56]	@ (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002102:	f000 f821 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 8002106:	4602      	mov	r2, r0
 8002108:	4b0b      	ldr	r3, [pc, #44]	@ (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	091b      	lsrs	r3, r3, #4
 800210e:	f003 030f 	and.w	r3, r3, #15
 8002112:	490a      	ldr	r1, [pc, #40]	@ (800213c <HAL_RCC_ClockConfig+0x1c0>)
 8002114:	5ccb      	ldrb	r3, [r1, r3]
 8002116:	fa22 f303 	lsr.w	r3, r2, r3
 800211a:	4a09      	ldr	r2, [pc, #36]	@ (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 800211c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800211e:	4b09      	ldr	r3, [pc, #36]	@ (8002144 <HAL_RCC_ClockConfig+0x1c8>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff f9ba 	bl	800149c <HAL_InitTick>

  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40023c00 	.word	0x40023c00
 8002138:	40023800 	.word	0x40023800
 800213c:	08002da4 	.word	0x08002da4
 8002140:	20000004 	.word	0x20000004
 8002144:	20000008 	.word	0x20000008

08002148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002148:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800214c:	b090      	sub	sp, #64	@ 0x40
 800214e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002150:	2300      	movs	r3, #0
 8002152:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002154:	2300      	movs	r3, #0
 8002156:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002158:	2300      	movs	r3, #0
 800215a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800215c:	2300      	movs	r3, #0
 800215e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002160:	4b59      	ldr	r3, [pc, #356]	@ (80022c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f003 030c 	and.w	r3, r3, #12
 8002168:	2b08      	cmp	r3, #8
 800216a:	d00d      	beq.n	8002188 <HAL_RCC_GetSysClockFreq+0x40>
 800216c:	2b08      	cmp	r3, #8
 800216e:	f200 80a1 	bhi.w	80022b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002172:	2b00      	cmp	r3, #0
 8002174:	d002      	beq.n	800217c <HAL_RCC_GetSysClockFreq+0x34>
 8002176:	2b04      	cmp	r3, #4
 8002178:	d003      	beq.n	8002182 <HAL_RCC_GetSysClockFreq+0x3a>
 800217a:	e09b      	b.n	80022b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800217c:	4b53      	ldr	r3, [pc, #332]	@ (80022cc <HAL_RCC_GetSysClockFreq+0x184>)
 800217e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002180:	e09b      	b.n	80022ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002182:	4b53      	ldr	r3, [pc, #332]	@ (80022d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002184:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002186:	e098      	b.n	80022ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002188:	4b4f      	ldr	r3, [pc, #316]	@ (80022c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002190:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002192:	4b4d      	ldr	r3, [pc, #308]	@ (80022c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d028      	beq.n	80021f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800219e:	4b4a      	ldr	r3, [pc, #296]	@ (80022c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	099b      	lsrs	r3, r3, #6
 80021a4:	2200      	movs	r2, #0
 80021a6:	623b      	str	r3, [r7, #32]
 80021a8:	627a      	str	r2, [r7, #36]	@ 0x24
 80021aa:	6a3b      	ldr	r3, [r7, #32]
 80021ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80021b0:	2100      	movs	r1, #0
 80021b2:	4b47      	ldr	r3, [pc, #284]	@ (80022d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80021b4:	fb03 f201 	mul.w	r2, r3, r1
 80021b8:	2300      	movs	r3, #0
 80021ba:	fb00 f303 	mul.w	r3, r0, r3
 80021be:	4413      	add	r3, r2
 80021c0:	4a43      	ldr	r2, [pc, #268]	@ (80022d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80021c2:	fba0 1202 	umull	r1, r2, r0, r2
 80021c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80021c8:	460a      	mov	r2, r1
 80021ca:	62ba      	str	r2, [r7, #40]	@ 0x28
 80021cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021ce:	4413      	add	r3, r2
 80021d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021d4:	2200      	movs	r2, #0
 80021d6:	61bb      	str	r3, [r7, #24]
 80021d8:	61fa      	str	r2, [r7, #28]
 80021da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80021e2:	f7fd fff9 	bl	80001d8 <__aeabi_uldivmod>
 80021e6:	4602      	mov	r2, r0
 80021e8:	460b      	mov	r3, r1
 80021ea:	4613      	mov	r3, r2
 80021ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80021ee:	e053      	b.n	8002298 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021f0:	4b35      	ldr	r3, [pc, #212]	@ (80022c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	099b      	lsrs	r3, r3, #6
 80021f6:	2200      	movs	r2, #0
 80021f8:	613b      	str	r3, [r7, #16]
 80021fa:	617a      	str	r2, [r7, #20]
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002202:	f04f 0b00 	mov.w	fp, #0
 8002206:	4652      	mov	r2, sl
 8002208:	465b      	mov	r3, fp
 800220a:	f04f 0000 	mov.w	r0, #0
 800220e:	f04f 0100 	mov.w	r1, #0
 8002212:	0159      	lsls	r1, r3, #5
 8002214:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002218:	0150      	lsls	r0, r2, #5
 800221a:	4602      	mov	r2, r0
 800221c:	460b      	mov	r3, r1
 800221e:	ebb2 080a 	subs.w	r8, r2, sl
 8002222:	eb63 090b 	sbc.w	r9, r3, fp
 8002226:	f04f 0200 	mov.w	r2, #0
 800222a:	f04f 0300 	mov.w	r3, #0
 800222e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002232:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002236:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800223a:	ebb2 0408 	subs.w	r4, r2, r8
 800223e:	eb63 0509 	sbc.w	r5, r3, r9
 8002242:	f04f 0200 	mov.w	r2, #0
 8002246:	f04f 0300 	mov.w	r3, #0
 800224a:	00eb      	lsls	r3, r5, #3
 800224c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002250:	00e2      	lsls	r2, r4, #3
 8002252:	4614      	mov	r4, r2
 8002254:	461d      	mov	r5, r3
 8002256:	eb14 030a 	adds.w	r3, r4, sl
 800225a:	603b      	str	r3, [r7, #0]
 800225c:	eb45 030b 	adc.w	r3, r5, fp
 8002260:	607b      	str	r3, [r7, #4]
 8002262:	f04f 0200 	mov.w	r2, #0
 8002266:	f04f 0300 	mov.w	r3, #0
 800226a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800226e:	4629      	mov	r1, r5
 8002270:	028b      	lsls	r3, r1, #10
 8002272:	4621      	mov	r1, r4
 8002274:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002278:	4621      	mov	r1, r4
 800227a:	028a      	lsls	r2, r1, #10
 800227c:	4610      	mov	r0, r2
 800227e:	4619      	mov	r1, r3
 8002280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002282:	2200      	movs	r2, #0
 8002284:	60bb      	str	r3, [r7, #8]
 8002286:	60fa      	str	r2, [r7, #12]
 8002288:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800228c:	f7fd ffa4 	bl	80001d8 <__aeabi_uldivmod>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	4613      	mov	r3, r2
 8002296:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002298:	4b0b      	ldr	r3, [pc, #44]	@ (80022c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	0c1b      	lsrs	r3, r3, #16
 800229e:	f003 0303 	and.w	r3, r3, #3
 80022a2:	3301      	adds	r3, #1
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80022a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80022aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022b2:	e002      	b.n	80022ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022b4:	4b05      	ldr	r3, [pc, #20]	@ (80022cc <HAL_RCC_GetSysClockFreq+0x184>)
 80022b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3740      	adds	r7, #64	@ 0x40
 80022c0:	46bd      	mov	sp, r7
 80022c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022c6:	bf00      	nop
 80022c8:	40023800 	.word	0x40023800
 80022cc:	00f42400 	.word	0x00f42400
 80022d0:	017d7840 	.word	0x017d7840

080022d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e07b      	b.n	80023de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d108      	bne.n	8002300 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80022f6:	d009      	beq.n	800230c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	61da      	str	r2, [r3, #28]
 80022fe:	e005      	b.n	800230c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d106      	bne.n	800232c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7fe ffe2 	bl	80012f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2202      	movs	r2, #2
 8002330:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002342:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002354:	431a      	orrs	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	431a      	orrs	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	431a      	orrs	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800237c:	431a      	orrs	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002386:	431a      	orrs	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002390:	ea42 0103 	orr.w	r1, r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002398:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	0c1b      	lsrs	r3, r3, #16
 80023aa:	f003 0104 	and.w	r1, r3, #4
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b2:	f003 0210 	and.w	r2, r3, #16
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	430a      	orrs	r2, r1
 80023bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	69da      	ldr	r2, [r3, #28]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b088      	sub	sp, #32
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	60f8      	str	r0, [r7, #12]
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	603b      	str	r3, [r7, #0]
 80023f2:	4613      	mov	r3, r2
 80023f4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023f6:	f7ff f895 	bl	8001524 <HAL_GetTick>
 80023fa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80023fc:	88fb      	ldrh	r3, [r7, #6]
 80023fe:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b01      	cmp	r3, #1
 800240a:	d001      	beq.n	8002410 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800240c:	2302      	movs	r3, #2
 800240e:	e12a      	b.n	8002666 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d002      	beq.n	800241c <HAL_SPI_Transmit+0x36>
 8002416:	88fb      	ldrh	r3, [r7, #6]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d101      	bne.n	8002420 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e122      	b.n	8002666 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002426:	2b01      	cmp	r3, #1
 8002428:	d101      	bne.n	800242e <HAL_SPI_Transmit+0x48>
 800242a:	2302      	movs	r3, #2
 800242c:	e11b      	b.n	8002666 <HAL_SPI_Transmit+0x280>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2203      	movs	r2, #3
 800243a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	88fa      	ldrh	r2, [r7, #6]
 800244e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	88fa      	ldrh	r2, [r7, #6]
 8002454:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800247c:	d10f      	bne.n	800249e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800248c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800249c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024a8:	2b40      	cmp	r3, #64	@ 0x40
 80024aa:	d007      	beq.n	80024bc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80024c4:	d152      	bne.n	800256c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d002      	beq.n	80024d4 <HAL_SPI_Transmit+0xee>
 80024ce:	8b7b      	ldrh	r3, [r7, #26]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d145      	bne.n	8002560 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d8:	881a      	ldrh	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e4:	1c9a      	adds	r2, r3, #2
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	3b01      	subs	r3, #1
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80024f8:	e032      	b.n	8002560 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b02      	cmp	r3, #2
 8002506:	d112      	bne.n	800252e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250c:	881a      	ldrh	r2, [r3, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002518:	1c9a      	adds	r2, r3, #2
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002522:	b29b      	uxth	r3, r3
 8002524:	3b01      	subs	r3, #1
 8002526:	b29a      	uxth	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800252c:	e018      	b.n	8002560 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800252e:	f7fe fff9 	bl	8001524 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	429a      	cmp	r2, r3
 800253c:	d803      	bhi.n	8002546 <HAL_SPI_Transmit+0x160>
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002544:	d102      	bne.n	800254c <HAL_SPI_Transmit+0x166>
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d109      	bne.n	8002560 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e082      	b.n	8002666 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002564:	b29b      	uxth	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1c7      	bne.n	80024fa <HAL_SPI_Transmit+0x114>
 800256a:	e053      	b.n	8002614 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d002      	beq.n	800257a <HAL_SPI_Transmit+0x194>
 8002574:	8b7b      	ldrh	r3, [r7, #26]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d147      	bne.n	800260a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	330c      	adds	r3, #12
 8002584:	7812      	ldrb	r2, [r2, #0]
 8002586:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258c:	1c5a      	adds	r2, r3, #1
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002596:	b29b      	uxth	r3, r3
 8002598:	3b01      	subs	r3, #1
 800259a:	b29a      	uxth	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80025a0:	e033      	b.n	800260a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d113      	bne.n	80025d8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	330c      	adds	r3, #12
 80025ba:	7812      	ldrb	r2, [r2, #0]
 80025bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c2:	1c5a      	adds	r2, r3, #1
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	3b01      	subs	r3, #1
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80025d6:	e018      	b.n	800260a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025d8:	f7fe ffa4 	bl	8001524 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d803      	bhi.n	80025f0 <HAL_SPI_Transmit+0x20a>
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ee:	d102      	bne.n	80025f6 <HAL_SPI_Transmit+0x210>
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d109      	bne.n	800260a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e02d      	b.n	8002666 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800260e:	b29b      	uxth	r3, r3
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1c6      	bne.n	80025a2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002614:	69fa      	ldr	r2, [r7, #28]
 8002616:	6839      	ldr	r1, [r7, #0]
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f000 f8b1 	bl	8002780 <SPI_EndRxTxTransaction>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d002      	beq.n	800262a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2220      	movs	r2, #32
 8002628:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10a      	bne.n	8002648 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002632:	2300      	movs	r3, #0
 8002634:	617b      	str	r3, [r7, #20]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	617b      	str	r3, [r7, #20]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	617b      	str	r3, [r7, #20]
 8002646:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e000      	b.n	8002666 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002664:	2300      	movs	r3, #0
  }
}
 8002666:	4618      	mov	r0, r3
 8002668:	3720      	adds	r7, #32
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
	...

08002670 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b088      	sub	sp, #32
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	603b      	str	r3, [r7, #0]
 800267c:	4613      	mov	r3, r2
 800267e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002680:	f7fe ff50 	bl	8001524 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002688:	1a9b      	subs	r3, r3, r2
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	4413      	add	r3, r2
 800268e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002690:	f7fe ff48 	bl	8001524 <HAL_GetTick>
 8002694:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002696:	4b39      	ldr	r3, [pc, #228]	@ (800277c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	015b      	lsls	r3, r3, #5
 800269c:	0d1b      	lsrs	r3, r3, #20
 800269e:	69fa      	ldr	r2, [r7, #28]
 80026a0:	fb02 f303 	mul.w	r3, r2, r3
 80026a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026a6:	e055      	b.n	8002754 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ae:	d051      	beq.n	8002754 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80026b0:	f7fe ff38 	bl	8001524 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	69fa      	ldr	r2, [r7, #28]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d902      	bls.n	80026c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d13d      	bne.n	8002742 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80026d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80026de:	d111      	bne.n	8002704 <SPI_WaitFlagStateUntilTimeout+0x94>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026e8:	d004      	beq.n	80026f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026f2:	d107      	bne.n	8002704 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002702:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002708:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800270c:	d10f      	bne.n	800272e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800272c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e018      	b.n	8002774 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d102      	bne.n	800274e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8002748:	2300      	movs	r3, #0
 800274a:	61fb      	str	r3, [r7, #28]
 800274c:	e002      	b.n	8002754 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	3b01      	subs	r3, #1
 8002752:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689a      	ldr	r2, [r3, #8]
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	4013      	ands	r3, r2
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	429a      	cmp	r2, r3
 8002762:	bf0c      	ite	eq
 8002764:	2301      	moveq	r3, #1
 8002766:	2300      	movne	r3, #0
 8002768:	b2db      	uxtb	r3, r3
 800276a:	461a      	mov	r2, r3
 800276c:	79fb      	ldrb	r3, [r7, #7]
 800276e:	429a      	cmp	r2, r3
 8002770:	d19a      	bne.n	80026a8 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3720      	adds	r7, #32
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	20000004 	.word	0x20000004

08002780 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b088      	sub	sp, #32
 8002784:	af02      	add	r7, sp, #8
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	2201      	movs	r2, #1
 8002794:	2102      	movs	r1, #2
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f7ff ff6a 	bl	8002670 <SPI_WaitFlagStateUntilTimeout>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d007      	beq.n	80027b2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027a6:	f043 0220 	orr.w	r2, r3, #32
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e032      	b.n	8002818 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80027b2:	4b1b      	ldr	r3, [pc, #108]	@ (8002820 <SPI_EndRxTxTransaction+0xa0>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a1b      	ldr	r2, [pc, #108]	@ (8002824 <SPI_EndRxTxTransaction+0xa4>)
 80027b8:	fba2 2303 	umull	r2, r3, r2, r3
 80027bc:	0d5b      	lsrs	r3, r3, #21
 80027be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80027c2:	fb02 f303 	mul.w	r3, r2, r3
 80027c6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80027d0:	d112      	bne.n	80027f8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	2200      	movs	r2, #0
 80027da:	2180      	movs	r1, #128	@ 0x80
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f7ff ff47 	bl	8002670 <SPI_WaitFlagStateUntilTimeout>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d016      	beq.n	8002816 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ec:	f043 0220 	orr.w	r2, r3, #32
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e00f      	b.n	8002818 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00a      	beq.n	8002814 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	3b01      	subs	r3, #1
 8002802:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800280e:	2b80      	cmp	r3, #128	@ 0x80
 8002810:	d0f2      	beq.n	80027f8 <SPI_EndRxTxTransaction+0x78>
 8002812:	e000      	b.n	8002816 <SPI_EndRxTxTransaction+0x96>
        break;
 8002814:	bf00      	nop
  }

  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3718      	adds	r7, #24
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	20000004 	.word	0x20000004
 8002824:	165e9f81 	.word	0x165e9f81

08002828 <memset>:
 8002828:	4402      	add	r2, r0
 800282a:	4603      	mov	r3, r0
 800282c:	4293      	cmp	r3, r2
 800282e:	d100      	bne.n	8002832 <memset+0xa>
 8002830:	4770      	bx	lr
 8002832:	f803 1b01 	strb.w	r1, [r3], #1
 8002836:	e7f9      	b.n	800282c <memset+0x4>

08002838 <__libc_init_array>:
 8002838:	b570      	push	{r4, r5, r6, lr}
 800283a:	4d0d      	ldr	r5, [pc, #52]	@ (8002870 <__libc_init_array+0x38>)
 800283c:	4c0d      	ldr	r4, [pc, #52]	@ (8002874 <__libc_init_array+0x3c>)
 800283e:	1b64      	subs	r4, r4, r5
 8002840:	10a4      	asrs	r4, r4, #2
 8002842:	2600      	movs	r6, #0
 8002844:	42a6      	cmp	r6, r4
 8002846:	d109      	bne.n	800285c <__libc_init_array+0x24>
 8002848:	4d0b      	ldr	r5, [pc, #44]	@ (8002878 <__libc_init_array+0x40>)
 800284a:	4c0c      	ldr	r4, [pc, #48]	@ (800287c <__libc_init_array+0x44>)
 800284c:	f000 f818 	bl	8002880 <_init>
 8002850:	1b64      	subs	r4, r4, r5
 8002852:	10a4      	asrs	r4, r4, #2
 8002854:	2600      	movs	r6, #0
 8002856:	42a6      	cmp	r6, r4
 8002858:	d105      	bne.n	8002866 <__libc_init_array+0x2e>
 800285a:	bd70      	pop	{r4, r5, r6, pc}
 800285c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002860:	4798      	blx	r3
 8002862:	3601      	adds	r6, #1
 8002864:	e7ee      	b.n	8002844 <__libc_init_array+0xc>
 8002866:	f855 3b04 	ldr.w	r3, [r5], #4
 800286a:	4798      	blx	r3
 800286c:	3601      	adds	r6, #1
 800286e:	e7f2      	b.n	8002856 <__libc_init_array+0x1e>
 8002870:	08002dbc 	.word	0x08002dbc
 8002874:	08002dbc 	.word	0x08002dbc
 8002878:	08002dbc 	.word	0x08002dbc
 800287c:	08002dc0 	.word	0x08002dc0

08002880 <_init>:
 8002880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002882:	bf00      	nop
 8002884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002886:	bc08      	pop	{r3}
 8002888:	469e      	mov	lr, r3
 800288a:	4770      	bx	lr

0800288c <_fini>:
 800288c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800288e:	bf00      	nop
 8002890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002892:	bc08      	pop	{r3}
 8002894:	469e      	mov	lr, r3
 8002896:	4770      	bx	lr
